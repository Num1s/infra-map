// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º
export const MOCK_FACILITY_TYPES = {
  polyclinic: {
    name: '–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞',
    icon: 'üè®',
    supported: false,
    mockData: {
      capacity: '250-300 –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å',
      departments: ['–¢–µ—Ä–∞–ø–∏—è', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è', '–ü–µ–¥–∏–∞—Ç—Ä–∏—è', '–ù–µ–≤—Ä–æ–ª–æ–≥–∏—è'],
      workingHours: '8:00-20:00 (–ø–Ω-–ø—Ç), 9:00-15:00 (—Å–±)',
      staff: '25-35 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'
    }
  },
  clinic: {
    name: '–ö–ª–∏–Ω–∏–∫–∞',
    icon: '‚öïÔ∏è',
    supported: false,
    mockData: {
      rooms: '8-12 –∫–∞–±–∏–Ω–µ—Ç–æ–≤',
      workingHours: '8:00-20:00 (–ø–Ω-–ø—Ç)',
      services: ['–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø–æ–º–æ—â—å', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞'],
      staff: '15-20 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
    }
  },
  police_station: {
    name: '–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫',
    icon: 'üöî',
    supported: false,
    mockData: {
      personnel: '25-40 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
      vehicles: '5-8 –ø–∞—Ç—Ä—É–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω',
      workingHours: '24/7',
      coverage: '—Ä–∞–π–æ–Ω 10-15 –∫–º¬≤'
    }
  },
  post_office: {
    name: '–ü–æ—á—Ç–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ',
    icon: 'üìÆ',
    supported: false,
    mockData: {
      workingHours: '9:00-18:00 (–ø–Ω-—Å–±)',
      dailyPackages: '150-250 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π',
      services: ['–ü–æ—á—Ç–∞', '–ü–æ—Å—ã–ª–∫–∏', '–ü–ª–∞—Ç–µ–∂–∏', '–ü–µ–Ω—Å–∏–∏'],
      staff: '3-5 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
    }
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const generateMockFacilities = () => {
  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥—Ä–∞–Ω–∏—Ü –ë–∏—à–∫–µ–∫–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ)
  const BISHKEK_BOUNDS = {
    north: 42.9200,
    south: 42.8000,
    east: 74.6500,
    west: 74.5000
  };

  // –ë–∞–∑–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü –ë–∏—à–∫–µ–∫–∞
  const STREETS = [
    '—É–ª. –ß—É–π', '—É–ª. –ú–∞–Ω–∞—Å–∞', '—É–ª. –¢–æ–∫—Ç–æ–≥—É–ª–∞', '—É–ª. –ö–∏–µ–≤—Å–∫–∞—è', 
    '—É–ª. –§—Ä—É–Ω–∑–µ', '—É–ª. –ò—Å–∞–Ω–æ–≤–∞', '—É–ª. –ë–æ–∫–æ–Ω–±–∞–µ–≤–∞', '—É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è',
    '—É–ª. –ì–æ—Ä—å–∫–æ–≥–æ', '—É–ª. –ê–±–¥—Ä–∞—Ö–º–∞–Ω–æ–≤–∞', '—É–ª. –Æ–Ω—É—Å–∞–ª–∏–µ–≤–∞', '—É–ª. –ê—Ö—É–Ω–±–∞–µ–≤–∞',
    '—É–ª. –¢—ã–Ω—ã—Å—Ç–∞–Ω–æ–≤–∞', '—É–ª. –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ', '—É–ª. –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞', '—É–ª. –î–∂–∞–Ω—Ç–æ—à–µ–≤–∞'
  ];

  // –†–∞–π–æ–Ω—ã –ë–∏—à–∫–µ–∫–∞
  const DISTRICTS = [
    '–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π', '–õ–µ–Ω–∏–Ω—Å–∫–∏–π', '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π', '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π'
  ];

  const randomCoordinate = (min, max) => {
    return (Math.random() * (max - min) + min).toFixed(6);
  };

  const randomFromArray = (array) => {
    return array[Math.floor(Math.random() * array.length)];
  };

  const randomNumber = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∂–∞—Ä–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π (0 –æ–±—ä–µ–∫—Ç–æ–≤, —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  const fireStations = Array.from({ length: 8 }, (_, index) => ({
    id: `fire_mock_${index + 1}`,
    name: `üîÑ –ü–æ–∂–∞—Ä–Ω–∞—è —á–∞—Å—Ç—å ‚Ññ${index + 1}`,
    type: 'fire_station',
    address: `üîÑ ${randomFromArray(STREETS)}, ${randomNumber(1, 100)}`,
    coordinates: [
      parseFloat(randomCoordinate(BISHKEK_BOUNDS.south, BISHKEK_BOUNDS.north)),
      parseFloat(randomCoordinate(BISHKEK_BOUNDS.west, BISHKEK_BOUNDS.east))
    ],
    district: randomFromArray(DISTRICTS),
    vehicles: randomNumber(3, 8),
    personnel: randomNumber(15, 35),
    responseTime: `${randomNumber(3, 8)} –º–∏–Ω`,
    coverage: `${randomNumber(8, 15)} –∫–º¬≤`,
    contact: `üîÑ +996 (312) ${randomNumber(100, 999)}-${randomNumber(100, 999)}`,
    isMock: true
  }));

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏—Ö —É—á–∞—Å—Ç–∫–æ–≤
  const policeStations = Array.from({ length: 12 }, (_, index) => ({
    id: `police_mock_${index + 1}`,
    name: `üîÑ –û–ü ‚Ññ${index + 1} –£–ú–í–î`,
    type: 'police_station',
    address: `üîÑ ${randomFromArray(STREETS)}, ${randomNumber(1, 150)}`,
    coordinates: [
      parseFloat(randomCoordinate(BISHKEK_BOUNDS.south, BISHKEK_BOUNDS.north)),
      parseFloat(randomCoordinate(BISHKEK_BOUNDS.west, BISHKEK_BOUNDS.east))
    ],
    district: randomFromArray(DISTRICTS),
    personnel: randomNumber(20, 45),
    vehicles: randomNumber(4, 10),
    coverage: `${randomNumber(10, 25)} –∫–º¬≤`,
    workingHours: '24/7',
    contact: `üîÑ +996 (312) ${randomNumber(100, 999)}-${randomNumber(100, 999)}`,
    isMock: true
  }));

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—á—Ç–æ–≤—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π
  const postOffices = Array.from({ length: 25 }, (_, index) => ({
    id: `post_mock_${index + 1}`,
    name: `üîÑ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ ${426000 + index}`,
    type: 'post_office',
    address: `üîÑ ${randomFromArray(STREETS)}, ${randomNumber(1, 180)}`,
    coordinates: [
      parseFloat(randomCoordinate(BISHKEK_BOUNDS.south, BISHKEK_BOUNDS.north)),
      parseFloat(randomCoordinate(BISHKEK_BOUNDS.west, BISHKEK_BOUNDS.east))
    ],
    district: randomFromArray(DISTRICTS),
    postcode: `426${String(index).padStart(3, '0')}`,
    dailyPackages: randomNumber(100, 300),
    staff: randomNumber(2, 8),
    workingHours: index % 7 === 0 ? '9:00-21:00' : '9:00-18:00', // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–æ–ª—å—à–µ
    services: ['–ü–æ—á—Ç–∞', '–ü–æ—Å—ã–ª–∫–∏', '–ü–ª–∞—Ç–µ–∂–∏', '–ü–µ–Ω—Å–∏–∏', '–ü–µ—Ä–µ–≤–æ–¥—ã'].slice(0, randomNumber(3, 5)),
    contact: `üîÑ +996 (312) ${randomNumber(100, 999)}-${randomNumber(100, 999)}`,
    isMock: true
  }));

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫
  const polyclinics = Array.from({ length: 15 }, (_, index) => ({
    id: `polyclinic_mock_${index + 1}`,
    name: `üîÑ –ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞ ‚Ññ${index + 1}`,
    type: 'polyclinic',
    address: `üîÑ ${randomFromArray(STREETS)}, ${randomNumber(1, 120)}`,
    coordinates: [
      parseFloat(randomCoordinate(BISHKEK_BOUNDS.south, BISHKEK_BOUNDS.north)),
      parseFloat(randomCoordinate(BISHKEK_BOUNDS.west, BISHKEK_BOUNDS.east))
    ],
    district: randomFromArray(DISTRICTS),
    dailyPatients: randomNumber(200, 400),
    staff: randomNumber(25, 50),
    departments: ['–¢–µ—Ä–∞–ø–∏—è', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è', '–ü–µ–¥–∏–∞—Ç—Ä–∏—è', '–ù–µ–≤—Ä–æ–ª–æ–≥–∏—è', '–•–∏—Ä—É—Ä–≥–∏—è', '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∏—è'].slice(0, randomNumber(3, 6)),
    workingHours: '8:00-20:00',
    emergencyHours: '–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ',
    contact: `üîÑ +996 (312) ${randomNumber(100, 999)}-${randomNumber(100, 999)}`,
    isMock: true
  }));

  return {
    fire_station: fireStations,
    police_station: policeStations,
    post_office: postOffices,
    polyclinic: polyclinics
  };
};

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
export const MOCK_FACILITIES = generateMockFacilities();
console.log('üîÑ –§–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', MOCK_FACILITIES);
console.log('üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
console.log(`  - –ü–æ–∂–∞—Ä–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏: ${MOCK_FACILITIES.fire_station?.length || 0}`);
console.log(`  - –ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–µ —É—á–∞—Å—Ç–∫–∏: ${MOCK_FACILITIES.police_station?.length || 0}`);
console.log(`  - –ü–æ—á—Ç–æ–≤—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è: ${MOCK_FACILITIES.post_office?.length || 0}`);
console.log(`  - –ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏: ${MOCK_FACILITIES.polyclinic?.length || 0}`);

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
export const MOCK_ANALYTICS = {
  demographic_analysis: {
    age_groups: {
      children: 28,
      adults: 58,
      elderly: 14
    },
    population_growth: 1.2
  },
  transport_analysis: {
    road_density: '–°—Ä–µ–¥–Ω—è—è',
    public_transport_coverage: 72,
    traffic_congestion: '–£–º–µ—Ä–µ–Ω–Ω–∞—è'
  },
  economic_factors: {
    investment_priority: 'medium',
    maintenance_cost: '–°—Ä–µ–¥–Ω–∏–µ',
    social_impact: '–í—ã—Å–æ–∫–æ–µ'
  }
};

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export const MOCK_STATISTICS = {
  coverage_improvement: 2.5,
  new_points_count: 4,
  people_covered: 15000,
  current_coverage: 68.5
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–ª—É—à–µ–∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
export const getMockFacilityData = (type) => {
  return MOCK_FACILITY_TYPES[type] || null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–µ–π–∫–æ–≤—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
export const getMockFacilities = (type) => {
  console.log(`üîÑ getMockFacilities –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è —Ç–∏–ø–∞: ${type}`);
  console.log('üîÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –≤ MOCK_FACILITIES:', Object.keys(MOCK_FACILITIES));
  
  if (type === 'all') {
    const allMockFacilities = Object.values(MOCK_FACILITIES).flat();
    console.log(`üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ñ–µ–π–∫–æ–≤—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è: ${allMockFacilities.length}`);
    return allMockFacilities;
  }
  
  const facilitiesForType = MOCK_FACILITIES[type] || [];
  console.log(`üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è ${type}: ${facilitiesForType.length}`);
  
  return facilitiesForType;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∏–ø–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
export const isFacilityTypeSupported = (type) => {
  const supportedTypes = ['school', 'hospital'];
  return supportedTypes.includes(type);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ç–∏–ø–µ
export const getUnsupportedTypeMessage = (type) => {
  const mockData = getMockFacilityData(type);
  if (!mockData) return null;
  
  return {
    title: '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
    message: `–ê–Ω–∞–ª–∏–∑ –¥–ª—è ${mockData.name.toLowerCase()} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.`,
    features: [
      '–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
      '–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω', 
      '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
      '–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    ]
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–µ–π–∫–æ–≤—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
export const getMockFacilityCount = (type) => {
  const counts = {
    fire_station: 8,
    police_station: 12,
    post_office: 25,
    polyclinic: 15
  };
  return counts[type] || 0;
}; 