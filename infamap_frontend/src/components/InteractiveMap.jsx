import React, { useEffect, useRef, useState } from 'react';
import L from 'leaflet';
import 'leaflet.heat';

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–∫–æ–Ω–∫–∞–º–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ Leaflet
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –≤ –º–µ—Ç—Ä–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–µ–∑–¥–∞
const calculateCoverageRadius = (travelTimeMinutes, facilityType, transportMode = 'default') => {
  const speeds = {
    school: {
      default: 4, // –∫–º/—á - –ø–µ—à–∫–æ–º (–¥–µ—Ç–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª–∏)
      walking: 4,
      cycling: 12,
      public_transport: 15
    },
    hospital: {
      default: 20, // –∫–º/—á - —Å–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å —Å —É—á–µ—Ç–æ–º –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π –∏ –ø—Ä–æ–±–æ–∫
      ambulance: 20,
      emergency: 25,
      car: 18
    },
    polyclinic: {
      default: 8, // –∫–º/—á - –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç/–ø–µ—à–∫–æ–º
      walking: 5,
      public_transport: 12,
      car: 20
    },
    clinic: {
      default: 6, // –∫–º/—á - –ø–µ—à–∫–æ–º/–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      walking: 5,
      public_transport: 10,
      car: 18
    },
    fire_station: {
      default: 25, // –∫–º/—á - –ø–æ–∂–∞—Ä–Ω–∞—è –º–∞—à–∏–Ω–∞ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞ —Å –ø—Ä–æ–±–∫–∞–º–∏)
      emergency: 25,
      normal_traffic: 15,
      heavy_traffic: 12
    },
    police_station: {
      default: 28, // –∫–º/—á - –ø–æ–ª–∏—Ü–µ–π—Å–∫–∞—è –º–∞—à–∏–Ω–∞ (–Ω–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–∂–∞—Ä–Ω–æ–π)
      emergency: 30,
      patrol: 25,
      normal_traffic: 18
    },
    post_office: {
      default: 5, // –∫–º/—á - –ø–µ—à–∫–æ–º, –Ω–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ
      walking: 4,
      public_transport: 12,
      car: 20
    }
  };
  
  const facilitySpeed = speeds[facilityType] || { default: 15 };
  const speed = facilitySpeed[transportMode] || facilitySpeed.default || 15;
  
  const distanceKm = (speed * travelTimeMinutes) / 60;
  return distanceKm * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–µ—Ç—Ä—ã
};

const InteractiveMap = ({ 
  facilities, 
  recommendations, 
  populationData, 
  selectedFacilityType,
  activeLayers,
  maxTravelTime = 30,
  showCoverageZones = true,
  onShowFacilityDetails,
  darkMode = false,
  selectedFacilityForMap = null
}) => {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ props –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  console.log('üó∫Ô∏è INTERACTIVEMAP PROPS:');
  console.log('  - facilities.length:', facilities?.length || 0);
  console.log('  - recommendations.length:', recommendations?.length || 0);
  console.log('  - populationData.length:', populationData?.length || 0);
  console.log('  - selectedFacilityType:', selectedFacilityType);
  console.log('  - activeLayers:', activeLayers);
  console.log('  - showCoverageZones:', showCoverageZones);
  
  const mapRef = useRef(null);
  const mapInstanceRef = useRef(null);
  const layersRef = useRef({
    facilities: null,
    recommendations: null,
    heatmap: null,
    coverage: null,
    individualCoverage: null,
    districts: null
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Ä–∞–¥–∏—É—Å–∞
  const [selectedFacilityId, setSelectedFacilityId] = useState(null);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π –ª–µ–≥–µ–Ω–¥—ã
  const [showFullLegend, setShowFullLegend] = useState(false);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤
  useEffect(() => {
    console.log('üîß –£–°–¢–ê–ù–û–í–ö–ê –ì–õ–û–ë–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô...');
    console.log('  - facilities.length:', facilities.length);
    console.log('  - onShowFacilityDetails exists:', !!onShowFacilityDetails);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô:');
    console.log('  - window.showFacilityDetails:', typeof window.showFacilityDetails);
    console.log('  - window.toggleFacilityCoverage:', typeof window.toggleFacilityCoverage);
    console.log('  - window.showDetailedPlacementAnalysis:', typeof window.showDetailedPlacementAnalysis);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
    window.showFacilityDetails = (facilityIdStr) => {
      console.log('üîç showFacilityDetails –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è ID:', facilityIdStr, 'type:', typeof facilityIdStr);
      try {
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ–≤—ã–µ, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID
        let facilityId = facilityIdStr;
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
        if (typeof facilityIdStr === 'string' && !isNaN(facilityIdStr) && !facilityIdStr.includes('_')) {
          facilityId = parseInt(facilityIdStr);
          console.log('  - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –≤ —á–∏—Å–ª–æ ID:', facilityId);
        } else {
          console.log('  - –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID:', facilityId);
        }
        
        console.log('  - –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:', facilities.map(f => ({ id: f.id, name: f.name, type: typeof f.id })));
        
        const facility = facilities.find(f => {
          // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–∞–∫ —á–∏—Å–ª–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
          return f.id === facilityId || 
                 f.id === facilityIdStr || 
                 String(f.id) === String(facilityId) ||
                 String(f.id) === String(facilityIdStr);
        });
        
        console.log('  - –ù–∞–π–¥–µ–Ω–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ:', facility?.name);
        
        if (facility) {
          console.log('  - –í—ã–∑—ã–≤–∞–µ–º onShowFacilityDetails –¥–ª—è:', facility.name);
          if (onShowFacilityDetails && typeof onShowFacilityDetails === 'function') {
            onShowFacilityDetails(facility);
          } else {
            console.error('‚ùå onShowFacilityDetails –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π:', typeof onShowFacilityDetails);
          }
        } else {
          console.warn('‚ùå –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ID:', facilityId);
          console.log('   –î–æ—Å—Ç—É–ø–Ω—ã–µ IDs:', facilities.map(f => f.id));
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ showFacilityDetails:', error);
      }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
    window.toggleFacilityCoverage = (facilityIdStr) => {
      console.log('üéØ toggleFacilityCoverage –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è ID:', facilityIdStr, 'type:', typeof facilityIdStr);
      try {
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ–≤—ã–µ, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID
        let facilityId = facilityIdStr;
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
        if (typeof facilityIdStr === 'string' && !isNaN(facilityIdStr) && !facilityIdStr.includes('_')) {
          facilityId = parseInt(facilityIdStr);
          console.log('  - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –≤ —á–∏—Å–ª–æ ID:', facilityId);
        } else {
          console.log('  - –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID:', facilityId);
        }
        
        console.log('  - –¢–µ–∫—É—â–∏–π selectedFacilityId:', selectedFacilityId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const facility = facilities.find(f => {
          return f.id === facilityId || 
                 f.id === facilityIdStr || 
                 String(f.id) === String(facilityId) ||
                 String(f.id) === String(facilityIdStr);
        });
        
        if (!facility) {
          console.warn('‚ùå –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ —Å ID', facilityId, '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          return;
        }
        
        console.log('  - –ù–∞–π–¥–µ–Ω–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ:', facility.name);
        
        setSelectedFacilityId(prevId => {
          // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ ID
          const isSameId = prevId === facility.id || 
                          String(prevId) === String(facility.id);
          const newId = isSameId ? null : facility.id;
          console.log('  - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞:', prevId, '->', newId);
          return newId;
        });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ toggleFacilityCoverage:', error);
      }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    window.showDetailedPlacementAnalysis = (recommendationData) => {
      console.log('üìä showDetailedPlacementAnalysis –≤—ã–∑–≤–∞–Ω–∞:', typeof recommendationData);
      try {
        const analysis = typeof recommendationData === 'string' 
          ? JSON.parse(recommendationData) 
          : recommendationData;
        
        console.log('  - Parsed analysis:', analysis);
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        const modal = document.createElement('div');
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.8);
          z-index: 10000;
          display: flex;
          align-items: center;
          justify-content: center;
          animation: fadeIn 0.3s ease-out;
        `;
        
        modal.innerHTML = createDetailedAnalysisModal(analysis);
        document.body.appendChild(modal);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            modal.remove();
          }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
        const handleEscape = (e) => {
          if (e.key === 'Escape') {
            modal.remove();
            document.removeEventListener('keydown', handleEscape);
          }
        };
        document.addEventListener('keydown', handleEscape);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ showDetailedPlacementAnalysis:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ' + error.message);
      }
    };

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. Facilities:', facilities.length, 'Selected ID:', selectedFacilityId);

    return () => {
      console.log('üóëÔ∏è –û–ß–ò–°–¢–ö–ê –ì–õ–û–ë–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô');
      delete window.showFacilityDetails;
      delete window.toggleFacilityCoverage;
      delete window.showDetailedPlacementAnalysis;
    };
  }, [facilities, onShowFacilityDetails]); // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–µ–∑ selectedFacilityId

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    if (!mapInstanceRef.current) {
      // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã - –ë–∏—à–∫–µ–∫
      const map = L.map(mapRef.current, {
        zoomControl: false,
        attributionControl: false
      }).setView([42.8746, 74.5698], 12);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π OpenStreetMap —Å–ª–æ–π
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors',
        maxZoom: 19
      }).addTo(map);

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
      L.control.zoom({
        position: 'topright'
      }).addTo(map);

      L.control.scale({
        position: 'bottomright',
        metric: true,
        imperial: false
      }).addTo(map);

      mapInstanceRef.current = map;
    }

    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.remove();
        mapInstanceRef.current = null;
      }
    };
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
  useEffect(() => {
    console.log('üè¢ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–õ–û–Ø –£–ß–†–ï–ñ–î–ï–ù–ò–ô:');
    console.log('  - mapInstanceRef.current:', !!mapInstanceRef.current);
    console.log('  - facilities.length:', facilities.length);
    console.log('  - activeLayers.facilities:', activeLayers.facilities);
    console.log('  - selectedFacilityType:', selectedFacilityType);
    
    if (!mapInstanceRef.current) {
      console.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª–æ–∏
    if (layersRef.current.facilities) {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π facilities');
      mapInstanceRef.current.removeLayer(layersRef.current.facilities);
    }
    if (layersRef.current.coverage) {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π coverage');
      mapInstanceRef.current.removeLayer(layersRef.current.coverage);
    }
    if (layersRef.current.individualCoverage) {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π individualCoverage');
      mapInstanceRef.current.removeLayer(layersRef.current.individualCoverage);
    }

    if (activeLayers.facilities && facilities.length > 0) {
      console.log('‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–∏ –¥–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏–π');
      const facilitiesLayer = L.layerGroup();
      const coverageLayer = L.layerGroup();

      // –§–∏–ª—å—Ç—Ä—É–µ–º —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É
      const filteredFacilities = facilities.filter(facility => 
        selectedFacilityType === 'all' || facility.type === selectedFacilityType
      );
      
      console.log('üìä –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –£–ß–†–ï–ñ–î–ï–ù–ò–ô:');
      console.log('  - –í—Å–µ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π:', facilities.length);
      console.log('  - –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredFacilities.length);
      console.log('  - –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É:', selectedFacilityType);

      filteredFacilities.forEach((facility, index) => {
        console.log(`üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ ${index + 1}:`, {
          id: facility.id,
          name: facility.name,
          type: facility.type,
          coordinates: facility.coordinates
        });
        
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
          if (!facility.coordinates || !Array.isArray(facility.coordinates) || facility.coordinates.length < 2) {
            console.warn(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è: ${facility.name}`, facility.coordinates);
            return;
          }

          console.log(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã: [${facility.coordinates[0]}, ${facility.coordinates[1]}]`);

          // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
          const icon = createFacilityIcon(facility.type);
          const popup = createFacilityPopup(facility);
          
          const marker = L.marker(facility.coordinates, { icon })
            .bindPopup(popup, {
              maxWidth: 450,
              minWidth: 320,
              closeButton: true,
              autoPan: true
            });
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          marker.on('popupopen', () => {
            console.log('Popup –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:', facility.name, 'ID:', facility.id);
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            setTimeout(() => {
              const detailsBtn = document.querySelector(`button[onclick*="showFacilityDetails(${facility.id})"]`);
              const radiusBtn = document.querySelector(`#coverage-btn-${facility.id}`);
              console.log('–ö–Ω–æ–ø–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:', { detailsBtn: !!detailsBtn, radiusBtn: !!radiusBtn });
            }, 100);
          });
          
          facilitiesLayer.addLayer(marker);
          console.log(`‚úÖ –ú–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–æ–π facilities`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è: ${facility.name}`, error);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—É –ø–æ–∫—Ä—ã—Ç–∏—è - –º—è–≥–∫–∏–µ –∫—Ä—É–≥–∏
        if (showCoverageZones && activeLayers.facilities) {
          try {
            const radius = calculateCoverageRadius(maxTravelTime, facility.type);
            const config = getFacilityIconConfig(facility.type);
            
            const coverageCircle = L.circle(facility.coordinates, {
              radius: radius,
              fillColor: config.color,
              fillOpacity: 0.1,
              color: config.color,
              weight: 1,
              opacity: 0.3,
              interactive: false
            });
            
            coverageLayer.addLayer(coverageCircle);
            console.log(`‚úÖ –ö—Ä—É–≥ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${facility.name}`);
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª—è: ${facility.name}`, error);
          }
        }
      });

      const facilitiesCount = facilitiesLayer.getLayers().length;
      const coverageCount = coverageLayer.getLayers().length;
      
      console.log('üìç –ò–¢–û–ì–ò –°–û–ó–î–ê–ù–ò–Ø –°–õ–û–ï–í:');
      console.log(`  - –ú–∞—Ä–∫–µ—Ä–æ–≤ –≤ facilitiesLayer: ${facilitiesCount}`);
      console.log(`  - –ö—Ä—É–≥–æ–≤ –≤ coverageLayer: ${coverageCount}`);

      if (facilitiesCount > 0) {
        facilitiesLayer.addTo(mapInstanceRef.current);
        layersRef.current.facilities = facilitiesLayer;
        console.log('‚úÖ –°–ª–æ–π facilities –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É');
      } else {
        console.warn('‚ö†Ô∏è –°–ª–æ–π facilities –ø—É—Å—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É');
      }

      if (showCoverageZones && coverageCount > 0) {
        coverageLayer.addTo(mapInstanceRef.current);
        layersRef.current.coverage = coverageLayer;
        console.log('‚úÖ –°–ª–æ–π coverage –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É');
      }
    } else {
      console.log('‚ùå –°–ª–æ–π facilities –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è:');
      console.log('  - activeLayers.facilities:', activeLayers.facilities);
      console.log('  - facilities.length:', facilities.length);
    }
  }, [facilities, activeLayers.facilities, selectedFacilityType, maxTravelTime, showCoverageZones]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
  useEffect(() => {
    console.log('üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ì–û –†–ê–î–ò–£–°–ê:');
    console.log('  - mapInstanceRef.current:', !!mapInstanceRef.current);
    console.log('  - selectedFacilityId:', selectedFacilityId);
    console.log('  - facilities.length:', facilities.length);
    console.log('  - maxTravelTime:', maxTravelTime);

    if (!mapInstanceRef.current) {
      console.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return;
    }

    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞. selectedFacilityId:', selectedFacilityId);

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
    if (layersRef.current.individualCoverage) {
      mapInstanceRef.current.removeLayer(layersRef.current.individualCoverage);
      layersRef.current.individualCoverage = null;
      console.log('–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–¥–∏—É—Å —É–¥–∞–ª–µ–Ω');
    }

    if (selectedFacilityId && facilities.length > 0) {
      const facility = facilities.find(f => f.id === selectedFacilityId);
      console.log('–ü–æ–∏—Å–∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è —Å ID:', selectedFacilityId);
      console.log('–ù–∞–π–¥–µ–Ω–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ:', facility?.name);
      console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:', facility?.coordinates);
      
      if (facility && facility.coordinates && Array.isArray(facility.coordinates) && facility.coordinates.length >= 2) {
        try {
          const individualCoverageLayer = L.layerGroup();
          const config = getFacilityIconConfig(facility.type);
          
          // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
          const radius = calculateCoverageRadius(maxTravelTime, facility.type);
          console.log('–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∫—Ä—ã—Ç–∏—è:', radius, '–º–µ—Ç—Ä–æ–≤ –¥–ª—è', facility.type, '—Å –≤—Ä–µ–º–µ–Ω–µ–º', maxTravelTime, '–º–∏–Ω');
          
          const coverageCircle = L.circle(facility.coordinates, {
            radius: radius,
            fillColor: config.color,
            fillOpacity: 0.25,
            color: config.color,
            weight: 4,
            opacity: 0.9,
            interactive: false,
            dashArray: '10, 5'
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å
          const label = L.marker(facility.coordinates, {
            icon: L.divIcon({
              html: `<div class="coverage-info-card" style="
                background: white;
                border: 2px solid ${config.color};
                border-radius: 12px;
                padding: 8px 12px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                font-family: system-ui, sans-serif;
                white-space: nowrap;
                transform: translateY(-10px);
              ">
                <div class="coverage-header" style="
                  display: flex;
                  align-items: center;
                  gap: 6px;
                  margin-bottom: 4px;
                ">
                  <span class="coverage-icon" style="font-size: 16px;">${config.symbol}</span>
                  <span class="coverage-title" style="
                    font-weight: 600;
                    color: #374151;
                    font-size: 13px;
                  ">${facility.name}</span>
                </div>
                <div class="coverage-stats" style="
                  display: flex;
                  gap: 12px;
                  font-size: 11px;
                  color: #6b7280;
                ">
                  <span class="coverage-distance" style="display: flex; align-items: center; gap: 2px;">
                    üéØ ${(radius/1000).toFixed(1)} –∫–º
                  </span>
                  <span class="coverage-time" style="display: flex; align-items: center; gap: 2px;">
                    ‚è±Ô∏è ${maxTravelTime} –º–∏–Ω
                  </span>
                </div>
              </div>`,
              iconSize: [220, 70],
              iconAnchor: [110, 85]
            })
          });
          
          individualCoverageLayer.addLayer(coverageCircle);
          individualCoverageLayer.addLayer(label);
          
          individualCoverageLayer.addTo(mapInstanceRef.current);
          layersRef.current.individualCoverage = individualCoverageLayer;
          
          // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑—É–º–æ–º
          const currentZoom = mapInstanceRef.current.getZoom();
          const targetZoom = Math.max(currentZoom, 13);
          mapInstanceRef.current.setView(facility.coordinates, targetZoom, { animate: true, duration: 0.5 });
          
          console.log('‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è:', facility.name);
          console.log('  - –†–∞–¥–∏—É—Å:', radius, '–º–µ—Ç—Ä–æ–≤');
          console.log('  - –¶–≤–µ—Ç:', config.color);
          console.log('  - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', facility.coordinates);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞:', error);
        }
      } else {
        console.warn('‚ùå –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', {
          facility: !!facility,
          coordinates: facility?.coordinates,
          coordinatesType: Array.isArray(facility?.coordinates),
          coordinatesLength: facility?.coordinates?.length
        });
      }
    } else {
      console.log('‚ÑπÔ∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è:', {
        selectedFacilityId,
        facilitiesCount: facilities.length
      });
    }
  }, [selectedFacilityId, facilities, maxTravelTime]); // –î–æ–±–∞–≤–∏–ª facilities –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  useEffect(() => {
    if (!mapInstanceRef.current) return;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π
    if (layersRef.current.recommendations) {
      mapInstanceRef.current.removeLayer(layersRef.current.recommendations);
      layersRef.current.recommendations = null;
    }

    console.log('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–õ–û–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:');
    console.log('activeLayers.recommendations:', activeLayers.recommendations);
    console.log('recommendations length:', recommendations?.length);
    console.log('selectedFacilityType:', selectedFacilityType);
    console.log('recommendations:', recommendations);

    if (activeLayers.recommendations && recommendations && recommendations.length > 0) {
      const recommendationsLayer = L.layerGroup();

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
      let filteredRecommendations = recommendations;
      
      console.log('üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:');
      console.log('selectedFacilityType:', selectedFacilityType);
      console.log('–í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', recommendations.length);
      
      if (selectedFacilityType !== 'all') {
        filteredRecommendations = recommendations.filter(rec => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∏–ø–æ–≤
          const recType = rec.type || rec.facility_type;
          console.log(`üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ${rec.id}:`);
          console.log(`   - rec.type: "${rec.type}"`);
          console.log(`   - rec.facility_type: "${rec.facility_type}"`);
          console.log(`   - rec.recommendation_type: "${rec.recommendation_type}"`);
          console.log(`   - selectedFacilityType: "${selectedFacilityType}"`);
          
          // –î–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö –∑–æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∏–ø
          if (rec.recommendation_type === 'gap_zone') {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è clinic_gap
            if (selectedFacilityType === 'clinic') {
              const isClinicGap = (rec.type === 'clinic_gap' || rec.facility_type === 'clinic');
              console.log(`   ‚úÖ clinic check: type="${rec.type}", facility_type="${rec.facility_type}" -> ${isClinicGap}`);
              return isClinicGap;
            }
            
            // –î–ª—è —à–∫–æ–ª
            if (selectedFacilityType === 'school') {
              const isSchoolGap = (rec.type === 'school_gap' || rec.facility_type === 'school');
              console.log(`   ‚úÖ school check: type="${rec.type}", facility_type="${rec.facility_type}" -> ${isSchoolGap}`);
              return isSchoolGap;
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º clinic_gap
            if ((selectedFacilityType === 'hospital' || selectedFacilityType === 'polyclinic')) {
              const isClinicRelated = (rec.type === 'clinic_gap' || rec.facility_type === 'clinic');
              console.log(`   ‚úÖ medical check: type="${rec.type}", facility_type="${rec.facility_type}" -> ${isClinicRelated}`);
              return isClinicRelated;
            }
          }
          
          // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
          const matches = recType === selectedFacilityType;
          console.log(`   ‚úÖ standard check: "${recType}" === "${selectedFacilityType}" -> ${matches}`);
          return matches;
        });
      }

      console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò:');
      console.log('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', filteredRecommendations.length);
      console.log('–î–µ—Ç–∞–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', filteredRecommendations.map(r => ({
        id: r.id,
        type: r.type,
        facility_type: r.facility_type,
        coordinates: r.coordinates
      })));

      filteredRecommendations.forEach((rec, index) => {
        console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é ${index + 1}:`, rec);
        
        if (rec.coordinates && Array.isArray(rec.coordinates) && rec.coordinates.length >= 2) {
          console.log(`   ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã: [${rec.coordinates[0]}, ${rec.coordinates[1]}]`);
          
          const icon = createRecommendationIcon(rec);
          const marker = L.marker(rec.coordinates, { icon })
            .bindPopup(createRecommendationPopup(rec));
          
          recommendationsLayer.addLayer(marker);
          console.log(`   ‚úÖ –ú–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–æ–π`);
        } else {
          console.warn(`   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`, rec.coordinates);
        }
      });

      const layersCount = recommendationsLayer.getLayers().length;
      console.log(`üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ —Å–ª–æ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${layersCount}`);

      if (layersCount > 0) {
        recommendationsLayer.addTo(mapInstanceRef.current);
        layersRef.current.recommendations = recommendationsLayer;
        console.log('‚úÖ –°–ª–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É');
      } else {
        console.warn('‚ö†Ô∏è –°–ª–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—É—Å—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É');
      }
    } else {
      console.log('‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è:');
      console.log('  - activeLayers.recommendations:', activeLayers.recommendations);
      console.log('  - recommendations exists:', !!recommendations);
      console.log('  - recommendations.length:', recommendations?.length);
    }
  }, [recommendations, activeLayers.recommendations, selectedFacilityType]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
  useEffect(() => {
    if (!mapInstanceRef.current) return;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π
    if (layersRef.current.heatmap) {
      mapInstanceRef.current.removeLayer(layersRef.current.heatmap);
      layersRef.current.heatmap = null; // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É
    }

    if (activeLayers.population && populationData.length > 0) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
      const enhancedData = populationData.map(([lat, lng, intensity]) => [
        lat, lng, Math.min(intensity * 2.5, 1.0) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤ 2.5 —Ä–∞–∑–∞
      ]);

      const heatmapLayer = L.heatLayer(enhancedData, {
        radius: 40,
        blur: 15,
        maxZoom: 17,
        max: 1.0,
        minOpacity: 0.2,
        gradient: {
          0.0: 'rgba(0, 0, 255, 0)',
          0.1: 'rgba(0, 100, 255, 0.2)',
          0.2: 'rgba(0, 255, 255, 0.4)',
          0.4: 'rgba(0, 255, 0, 0.6)',
          0.6: 'rgba(255, 255, 0, 0.8)',
          0.8: 'rgba(255, 165, 0, 0.9)',
          1.0: 'rgba(255, 0, 0, 1.0)'
        }
      });

      heatmapLayer.addTo(mapInstanceRef.current);
      layersRef.current.heatmap = heatmapLayer;
    }
  }, [populationData, activeLayers.population]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ä–∞–π–æ–Ω–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏
  useEffect(() => {
    console.log('üîÑ useEffect –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ —Ä–∞–π–æ–Ω–æ–≤:', {
      hasMap: !!mapInstanceRef.current,
      populationActive: activeLayers.population,
      allActiveLayers: activeLayers
    });
    
    if (!mapInstanceRef.current) return;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π —Ä–∞–π–æ–Ω–æ–≤
    if (layersRef.current.districts) {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã —Ä–∞–π–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ —Å–ª–æ–π');
      mapInstanceRef.current.removeLayer(layersRef.current.districts);
      layersRef.current.districts = null; // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É
    }

    // –ï—Å–ª–∏ —Å–ª–æ–π –Ω–∞—Å–µ–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–µ —Å–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ä–∞–π–æ–Ω–æ–≤
    if (!activeLayers.population) {
      console.log('üö´ –°–ª–æ–π –Ω–∞—Å–µ–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω, –º–∞—Ä–∫–µ—Ä—ã —Ä–∞–π–æ–Ω–æ–≤ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è');
      return;
    }

    console.log('‚úÖ –°–ª–æ–π –Ω–∞—Å–µ–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω, —Å–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ä–∞–π–æ–Ω–æ–≤');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–π–æ–Ω–∞—Ö –∏–∑ apiService (–µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)
    const addDistrictMarkers = async () => {
      try {
        console.log('üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ —Ä–∞–π–æ–Ω–æ–≤...');
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–π–æ–Ω–∞—Ö
        const populationEstimate = await window.apiService?.getPopulationEstimate();
        
        if (populationEstimate && populationEstimate.districts) {
          const districtsLayer = L.layerGroup();
          
          // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–æ–≤ —Ä–∞–π–æ–Ω–æ–≤
          const districtCenters = {
            '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π —Ä–∞–π–æ–Ω': { lat: 42.8391489, lon: 74.6141665 },
            '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π': { lat: 42.8391489, lon: 74.6141665 },
            '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω': { lat: 42.8780000, lon: 74.6050000 },
            '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π': { lat: 42.8780000, lon: 74.6050000 },
            '–õ–µ–Ω–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω': { lat: 42.8590000, lon: 74.5820000 },
            '–õ–µ–Ω–∏–Ω—Å–∫–∏–π': { lat: 42.8590000, lon: 74.5820000 },
            '–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω': { lat: 42.8746000, lon: 74.6122000 },
            '–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π': { lat: 42.8746000, lon: 74.6122000 }
          };

          populationEstimate.districts.forEach(district => {
            const center = districtCenters[district.district];
            if (center) {
              const marker = L.marker([center.lat, center.lon], {
                icon: L.divIcon({
                  className: 'district-marker',
                  html: `
                    <div style="
                      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                      color: white;
                      padding: 8px 12px;
                      border-radius: 12px;
                      border: 2px solid white;
                      box-shadow: 0 4px 16px rgba(59, 130, 246, 0.4);
                      text-align: center;
                      font-size: 12px;
                      font-weight: bold;
                      min-width: 100px;
                      animation: districtPulse 3s infinite;
                    ">
                      <div style="font-size: 14px; margin-bottom: 2px;">üìä</div>
                      <div>${district.district.replace(' —Ä–∞–π–æ–Ω', '')}</div>
                      <div style="font-size: 10px; opacity: 0.9;">
                        ${(district.estimated_population / 1000).toFixed(0)}k —á–µ–ª.
                      </div>
                    </div>
                  `,
                  iconSize: [120, 50],
                  iconAnchor: [60, 25]
                })
              }).bindPopup(`
                <div style="padding: 0; min-width: 280px; font-family: system-ui, sans-serif;">
                  <div style="padding: 12px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); color: white; margin: 0;">
                    <h3 style="margin: 0; font-size: 16px; display: flex; align-items: center; gap: 8px;">
                      <span style="font-size: 20px;">üèòÔ∏è</span>
                      ${district.district}
                    </h3>
                  </div>
                  
                  <div style="padding: 16px;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; margin-bottom: 16px;">
                      <div style="text-align: center; padding: 12px; background: #f8fafc; border-radius: 8px;">
                        <div style="font-size: 24px; font-weight: bold; color: #1d4ed8;">
                          ${district.estimated_population.toLocaleString()}
                        </div>
                        <div style="font-size: 12px; color: #64748b; margin-top: 4px;">
                          üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ
                        </div>
                      </div>
                      
                      <div style="text-align: center; padding: 12px; background: #f8fafc; border-radius: 8px;">
                        <div style="font-size: 24px; font-weight: bold; color: #059669;">
                          ${district.num_buildings}
                        </div>
                        <div style="font-size: 12px; color: #64748b; margin-top: 4px;">
                          üè¢ –ó–¥–∞–Ω–∏–π
                        </div>
                      </div>
                    </div>
                    
                    <div style="background: #f1f5f9; padding: 12px; border-radius: 8px; margin-bottom: 12px;">
                      <div style="font-size: 14px; font-weight: 600; color: #334155; margin-bottom: 8px;">
                        üìà –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è
                      </div>
                      <div style="display: flex; align-items: center; gap: 8px;">
                        <div style="flex: 1; background: #e2e8f0; height: 8px; border-radius: 4px; overflow: hidden;">
                          <div style="
                            height: 100%;
                            background: linear-gradient(90deg, #10b981, #059669);
                            width: ${Math.min((district.estimated_population / 600000) * 100, 100)}%;
                            transition: width 0.3s ease;
                          "></div>
                        </div>
                        <span style="font-size: 12px; color: #64748b; font-weight: 600;">
                          ${((district.estimated_population / district.num_buildings) | 0)} —á–µ–ª/–∑–¥–∞–Ω–∏–µ
                        </span>
                      </div>
                    </div>
                    
                    <div style="font-size: 12px; color: #64748b; text-align: center; border-top: 1px solid #e2e8f0; padding-top: 12px;">
                      üí° –î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∂–∏–ª—ã—Ö –∑–¥–∞–Ω–∏–π
                    </div>
                  </div>
                </div>
              `, {
                maxWidth: 300,
                closeButton: true,
                autoPan: true
              });

              districtsLayer.addLayer(marker);
            }
          });

          if (districtsLayer.getLayers().length > 0) {
            districtsLayer.addTo(mapInstanceRef.current);
            layersRef.current.districts = districtsLayer;
            console.log('‚úÖ –ú–∞—Ä–∫–µ—Ä—ã —Ä–∞–π–æ–Ω–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç—É');
          }
        }
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤:', error.message);
      }
    };

    // –í—ã—Å—Ç–∞–≤–ª—è–µ–º apiService –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    if (!window.apiService && window.apiService !== null) {
      import('../services/apiService').then(module => {
        window.apiService = module.apiService;
        addDistrictMarkers();
      });
    } else {
      addDistrictMarkers();
    }
  }, [activeLayers.population]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏ –∏–∑ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    console.log('üéØ –≠–§–§–ï–ö–¢ –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–Ø –ö–ê–†–¢–´:');
    console.log('  - mapInstanceRef.current:', !!mapInstanceRef.current);
    console.log('  - selectedFacilityForMap:', selectedFacilityForMap);
    
    if (!mapInstanceRef.current || !selectedFacilityForMap) {
      console.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (!selectedFacilityForMap.coordinates || 
        !Array.isArray(selectedFacilityForMap.coordinates) || 
        selectedFacilityForMap.coordinates.length < 2) {
      console.warn('‚ùå –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', selectedFacilityForMap.coordinates);
      return;
    }

    console.log('‚úÖ –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏:', {
      name: selectedFacilityForMap.name,
      coordinates: selectedFacilityForMap.coordinates,
      type: selectedFacilityForMap.type
    });

    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏ —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const targetZoom = 15; // –ü–æ–¥—Ö–æ–¥—è—â–∏–π –∑—É–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    mapInstanceRef.current.setView(
      selectedFacilityForMap.coordinates, 
      targetZoom, 
      { 
        animate: true, 
        duration: 1.0, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        easeLinearity: 0.25 // –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
      }
    );

    console.log('üéØ –ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞:', selectedFacilityForMap.name);
  }, [selectedFacilityForMap]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–æ—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
  const [highlightLayer, setHighlightLayer] = useState(null);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
  useEffect(() => {
    if (!mapInstanceRef.current) return;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
    if (highlightLayer) {
      mapInstanceRef.current.removeLayer(highlightLayer);
      setHighlightLayer(null);
    }

    if (selectedFacilityForMap && selectedFacilityForMap.coordinates) {
      console.log('‚ú® –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –¥–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:', selectedFacilityForMap.name);
      
      // –°–æ–∑–¥–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π –∫—Ä—É–≥ –≤–æ–∫—Ä—É–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
      const highlight = L.circle(selectedFacilityForMap.coordinates, {
        radius: 200, // –†–∞–¥–∏—É—Å –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        fillColor: '#3b82f6',
        fillOpacity: 0.3,
        color: '#1d4ed8',
        weight: 3,
        opacity: 0.8,
        interactive: false, // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ
        className: 'facility-highlight' // –î–ª—è CSS –∞–Ω–∏–º–∞—Ü–∏–∏
      });

      // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É–ª—å—Å–∞—Ü–∏–∏
      const style = document.createElement('style');
      style.textContent = `
        .facility-highlight {
          animation: facilityPulse 2s infinite;
        }
        @keyframes facilityPulse {
          0% { opacity: 0.3; transform: scale(1); }
          50% { opacity: 0.7; transform: scale(1.1); }
          100% { opacity: 0.3; transform: scale(1); }
        }
      `;
      document.head.appendChild(style);

      highlight.addTo(mapInstanceRef.current);
      setHighlightLayer(highlight);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        if (highlight && mapInstanceRef.current) {
          mapInstanceRef.current.removeLayer(highlight);
          setHighlightLayer(null);
          document.head.removeChild(style);
        }
      }, 5000);
    }
  }, [selectedFacilityForMap, highlightLayer]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
  const createFacilityIcon = (type) => {
    const iconConfig = getFacilityIconConfig(type);
    
    return L.divIcon({
      className: 'custom-marker facility-marker',
      html: `
        <div style="
          width: 40px; 
          height: 40px; 
          border-radius: 50%; 
          background: linear-gradient(135deg, ${iconConfig.color}, ${iconConfig.color}dd); 
          border: 3px solid white; 
          display: flex; 
          align-items: center; 
          justify-content: center; 
          font-size: 18px;
          box-shadow: 0 4px 16px rgba(0,0,0,0.2);
          transition: all 0.3s ease;
          animation: bounceIn 0.6s ease-out;
        ">
          ${iconConfig.symbol}
        </div>
      `,
      iconSize: [40, 40],
      iconAnchor: [20, 20],
      popupAnchor: [0, -20]
    });
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const createRecommendationIcon = (recommendation) => {
    const config = getFacilityIconConfig(recommendation.type);
    const priorityColors = {
      high: '#dc2626',
      medium: '#f59e0b',
      low: '#10b981'
    };
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö –∑–æ–Ω —à–∫–æ–ª
    if (recommendation.recommendation_type === 'gap_zone' && recommendation.type === 'school_gap') {
      return L.divIcon({
        className: 'custom-marker recommendation-marker new-school-marker',
        html: `
          <div style="
            width: 55px; 
            height: 55px; 
            border-radius: 50%; 
            background: linear-gradient(135deg, #10b981, #059669); 
            border: 4px solid #d1fae5; 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            font-size: 20px;
            box-shadow: 0 8px 32px rgba(16, 185, 129, 0.4);
            position: relative;
            animation: recommendationPulse 2s infinite, float 3s ease-in-out infinite;
          ">
            üè´
            <div style="
              position: absolute;
              top: -10px;
              right: -10px;
              width: 24px;
              height: 24px;
              background: ${priorityColors[recommendation.priority] || '#10b981'};
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              font-size: 12px;
              color: white;
              font-weight: bold;
              border: 2px solid white;
              animation: priorityBadgePulse 1.5s infinite;
            ">
              ‚ú®
            </div>
            <div style="
              position: absolute;
              bottom: -12px;
              left: 50%;
              transform: translateX(-50%);
              background: #10b981;
              color: white;
              padding: 2px 6px;
              border-radius: 8px;
              font-size: 9px;
              font-weight: bold;
              border: 1px solid white;
              white-space: nowrap;
            ">
              –ù–û–í–ê–Ø
            </div>
          </div>
        `,
        iconSize: [55, 55],
        iconAnchor: [27.5, 27.5],
        popupAnchor: [0, -27.5]
      });
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö –∑–æ–Ω –∫–ª–∏–Ω–∏–∫
    if (recommendation.recommendation_type === 'gap_zone' && recommendation.type === 'clinic_gap') {
      return L.divIcon({
        className: 'custom-marker recommendation-marker new-clinic-marker',
        html: `
          <div style="
            width: 55px; 
            height: 55px; 
            border-radius: 50%; 
            background: linear-gradient(135deg, #7c3aed, #5b21b6); 
            border: 4px solid #ede9fe; 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            font-size: 20px;
            box-shadow: 0 8px 32px rgba(124, 58, 237, 0.4);
            position: relative;
            animation: recommendationPulse 2s infinite, float 3s ease-in-out infinite;
          ">
            ‚öïÔ∏è
            <div style="
              position: absolute;
              top: -10px;
              right: -10px;
              width: 24px;
              height: 24px;
              background: ${priorityColors[recommendation.priority] || '#7c3aed'};
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              font-size: 12px;
              color: white;
              font-weight: bold;
              border: 2px solid white;
              animation: priorityBadgePulse 1.5s infinite;
            ">
              üíä
            </div>
            <div style="
              position: absolute;
              bottom: -12px;
              left: 50%;
              transform: translateX(-50%);
              background: #7c3aed;
              color: white;
              padding: 2px 6px;
              border-radius: 8px;
              font-size: 9px;
              font-weight: bold;
              border: 1px solid white;
              white-space: nowrap;
            ">
              –ù–û–í–ê–Ø
            </div>
          </div>
        `,
        iconSize: [55, 55],
        iconAnchor: [27.5, 27.5],
        popupAnchor: [0, -27.5]
      });
    }
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    return L.divIcon({
      className: 'custom-marker recommendation-marker',
      html: `
        <div style="
          width: 50px; 
          height: 50px; 
          border-radius: 50%; 
          background: linear-gradient(135deg, ${config.color}, ${config.color}dd); 
          border: 4px solid ${priorityColors[recommendation.priority] || '#f59e0b'}; 
          display: flex; 
          align-items: center; 
          justify-content: center; 
          font-size: 18px;
          box-shadow: 0 8px 32px rgba(0,0,0,0.3);
          position: relative;
          animation: recommendationPulse 3s infinite, float 4s ease-in-out infinite;
        ">
          ${config.symbol}
          <div style="
            position: absolute;
            top: -8px;
            right: -8px;
            width: 20px;
            height: 20px;
            background: ${priorityColors[recommendation.priority] || '#f59e0b'};
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            color: white;
            font-weight: bold;
            border: 2px solid white;
            animation: priorityBadgePulse 2s infinite;
          ">
            ‚ö°
          </div>
        </div>
      `,
      iconSize: [50, 50],
      iconAnchor: [25, 25],
      popupAnchor: [0, -25]
    });
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫
  const getFacilityIconConfig = (type) => {
    const configs = {
      school: { 
        color: '#10b981',
        symbol: 'üè´',
        name: '–®–∫–æ–ª–∞'
      },
      school_gap: { 
        color: '#10b981',
        symbol: 'üè´',
        name: '–ù–æ–≤–∞—è —à–∫–æ–ª–∞'
      },
      hospital: { 
        color: '#dc2626',
        symbol: 'üè•',
        name: '–ë–æ–ª—å–Ω–∏—Ü–∞'
      },
      polyclinic: { 
        color: '#2563eb',
        symbol: 'üè®',
        name: '–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞'
      },
      clinic: { 
        color: '#7c3aed',
        symbol: '‚öïÔ∏è',
        name: '–ö–ª–∏–Ω–∏–∫–∞'
      },
      clinic_gap: { 
        color: '#7c3aed',
        symbol: '‚öïÔ∏è',
        name: '–ù–æ–≤–∞—è –∫–ª–∏–Ω–∏–∫–∞'
      },
      fire_station: { 
        color: '#ea580c',
        symbol: 'üöí',
        name: '–ü–æ–∂–∞—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è'
      },
      police_station: { 
        color: '#1f2937',
        symbol: 'üöî',
        name: '–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫'
      },
      post_office: { 
        color: '#059669',
        symbol: 'üìÆ',
        name: '–ü–æ—á—Ç–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ'
      }
    };
    
    return configs[type] || { 
      color: '#6b7280',
      symbol: 'üìç',
      name: '–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ'
    };
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø–∞–ø–∞ –¥–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
  const createFacilityPopup = (facility) => {
    const iconConfig = getFacilityIconConfig(facility.type);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
    const renderStars = (rating) => {
      const stars = [];
      for (let i = 1; i <= 5; i++) {
        stars.push(i <= rating ? '‚≠ê' : '‚òÜ');
      }
      return stars.join('');
    };

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
    let specificStats = '';
    if (facility.type === 'school') {
      specificStats = `
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; margin: 12px 0;">
          <div style="background: #f0f9ff; padding: 8px; border-radius: 6px; text-align: center;">
            <div style="font-size: 12px; color: #0369a1; font-weight: 600;">–ü–û–°–ï–©–ê–ï–ú–û–°–¢–¨</div>
            <div style="font-size: 16px; color: #0c4a6e; font-weight: bold;">${facility.statistics?.attendanceRate || '-'}%</div>
            </div>
          <div style="background: #f0fdf4; padding: 8px; border-radius: 6px; text-align: center;">
            <div style="font-size: 12px; color: #059669; font-weight: 600;">–£–°–ü–ï–í–ê–ï–ú–û–°–¢–¨</div>
            <div style="font-size: 16px; color: #047857; font-weight: bold;">${facility.statistics?.passRate || '-'}%</div>
          </div>
          <div style="background: #fffbeb; padding: 8px; border-radius: 6px; text-align: center;">
            <div style="font-size: 12px; color: #d97706; font-weight: 600;">–£–ß–ï–ù–ò–ö–û–í</div>
            <div style="font-size: 16px; color: #b45309; font-weight: bold;">${facility.currentStudents || '-'}/${facility.capacity || '-'}</div>
          </div>
          <div style="background: #fdf2f8; padding: 8px; border-radius: 6px; text-align: center;">
            <div style="font-size: 12px; color: #be185d; font-weight: 600;">–£–ß–ò–¢–ï–õ–ï–ô</div>
            <div style="font-size: 16px; color: #9d174d; font-weight: bold;">${facility.teachers || '-'}</div>
          </div>
        </div>
        
        ${facility.languages && Array.isArray(facility.languages) && facility.languages.length > 0 ? `
        <div style="margin: 8px 0;">
          <div style="font-size: 12px; color: #6b7280; font-weight: 600; margin-bottom: 4px;">–Ø–ó–´–ö–ò –û–ë–£–ß–ï–ù–ò–Ø:</div>
          <div style="display: flex; flex-wrap: wrap; gap: 4px;">
            ${facility.languages.map(language => 
              `<span style="background: #dcfce7; color: #166534; padding: 2px 8px; border-radius: 12px; font-size: 11px;">${language}</span>`
            ).join('')}
          </div>
        </div>
        ` : ''}
      `;
    } else if (facility.type === 'hospital' || facility.type === 'clinic' || facility.type === 'polyclinic') {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
      const isHospital = facility.type === 'hospital';
      const typeColors = {
        hospital: { bg: '#fef2f2', text: '#dc2626', accent: '#991b1b' },
        clinic: { bg: '#f3e8ff', text: '#7c3aed', accent: '#5b21b6' },
        polyclinic: { bg: '#eff6ff', text: '#2563eb', accent: '#1d4ed8' }
      };
      const colors = typeColors[facility.type] || typeColors.clinic;
      
      specificStats = `
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; margin: 12px 0;">
          ${isHospital ? `
          <div style="background: ${colors.bg}; padding: 8px; border-radius: 6px; text-align: center;">
            <div style="font-size: 12px; color: ${colors.text}; font-weight: 600;">–ö–û–ô–ö–ò</div>
            <div style="font-size: 16px; color: ${colors.accent}; font-weight: bold;">${facility.beds || '-'}</div>
            </div>
          ` : `
          <div style="background: ${colors.bg}; padding: 8px; border-radius: 6px; text-align: center;">
            <div style="font-size: 12px; color: ${colors.text}; font-weight: 600;">–ü–ê–¶–ò–ï–ù–¢–´/–î–ï–ù–¨</div>
            <div style="font-size: 16px; color: ${colors.accent}; font-weight: bold;">${facility.currentLoad || '-'}</div>
          </div>
          `}
          <div style="background: #f0fdf4; padding: 8px; border-radius: 6px; text-align: center;">
            <div style="font-size: 12px; color: #059669; font-weight: 600;">–í–†–ê–ß–ï–ô</div>
            <div style="font-size: 16px; color: #047857; font-weight: bold;">${facility.doctors || '-'}</div>
          </div>
          <div style="background: #fffbeb; padding: 8px; border-radius: 6px; text-align: center;">
            <div style="font-size: 12px; color: #d97706; font-weight: 600;">–ó–ê–ì–†–£–ó–ö–ê</div>
            <div style="font-size: 16px; color: #b45309; font-weight: bold;">${facility.currentLoad ? Math.round((facility.currentLoad / facility.capacity) * 100) : '-'}%</div>
          </div>
          <div style="background: #fdf2f8; padding: 8px; border-radius: 6px; text-align: center;">
            <div style="font-size: 12px; color: #be185d; font-weight: 600;">–†–ï–ñ–ò–ú</div>
            <div style="font-size: 13px; color: #9d174d; font-weight: bold; line-height: 1;">${facility.workingHours || '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ'}</div>
          </div>
        </div>
        
        ${facility.departments && Array.isArray(facility.departments) && facility.departments.length > 0 ? `
        <div style="margin: 8px 0;">
          <div style="font-size: 12px; color: #6b7280; font-weight: 600; margin-bottom: 4px;">–û–¢–î–ï–õ–ï–ù–ò–Ø:</div>
          <div style="display: flex; flex-wrap: wrap; gap: 4px;">
            ${facility.departments.slice(0, 4).map(dept => 
              `<span style="background: ${colors.bg}; color: ${colors.accent}; padding: 2px 8px; border-radius: 12px; font-size: 11px;">${dept}</span>`
            ).join('')}
            ${facility.departments.length > 4 ? `<span style="background: #f3f4f6; color: #6b7280; padding: 2px 8px; border-radius: 12px; font-size: 11px;">+${facility.departments.length - 4}</span>` : ''}
          </div>
        </div>
        ` : ''}
      `;
    }
    
    return `
      <div style="padding: 0; min-width: 320px; max-width: 420px; font-family: system-ui, sans-serif;">
        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
        <div style="padding: 16px; background: ${iconConfig.color}; color: white; margin: 0;">
          <div style="display: flex; align-items: center; justify-content: between;">
            <div style="flex: 1;">
              <h3 style="margin: 0 0 4px 0; font-size: 18px; font-weight: bold; line-height: 1.2;">
                ${iconConfig.symbol} ${facility.name}
              </h3>
              <div style="font-size: 12px; opacity: 0.9;">${iconConfig.name}</div>
              ${facility.rating ? `
              <div style="margin-top: 6px; font-size: 14px;">
                ${renderStars(facility.rating)} <span style="font-size: 12px; opacity: 0.9;">(${facility.rating})</span>
              </div>
              ` : ''}
            </div>
          </div>
        </div>
        
        <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
        <div style="padding: 16px; background: white;">
          <div style="margin-bottom: 12px;">
            <div style="font-size: 12px; color: #6b7280; font-weight: 600; margin-bottom: 2px;">–ê–î–†–ï–°</div>
            <div style="font-size: 14px; color: #374151; font-weight: 500;">${facility.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
          </div>
          
          ${specificStats}
          
          <!-- –ë—é–¥–∂–µ—Ç, –ø–æ–∫—Ä—ã—Ç–∏–µ –∏ —Ä–∞–¥–∏—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ -->
          ${facility.statistics ? `
          <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 6px; margin: 12px 0; padding: 10px; background: #f9fafb; border-radius: 8px;">
            <div style="text-align: center;">
              <div style="font-size: 11px; color: #6b7280; font-weight: 600;">–ë–Æ–î–ñ–ï–¢/–ì–û–î</div>
              <div style="font-size: 13px; color: #374151; font-weight: bold;">${facility.statistics?.yearlyBudget ? (facility.statistics.yearlyBudget / 1000000).toFixed(1) + '–ú' : '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
            </div>
            <div style="text-align: center;">
              <div style="font-size: 11px; color: #6b7280; font-weight: 600;">–ü–û–ö–†–´–¢–ò–ï</div>
              <div style="font-size: 13px; color: #374151; font-weight: bold;">${facility.statistics?.coverageArea ? facility.statistics.coverageArea.toFixed(1) + ' –∫–º¬≤' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            </div>
            <div style="text-align: center;">
              <div style="font-size: 11px; color: #6b7280; font-weight: 600;">–†–ê–î–ò–£–° (30–º)</div>
              <div style="font-size: 13px; color: ${iconConfig.color}; font-weight: bold;">${(calculateCoverageRadius(30, facility.type) / 1000).toFixed(1)} –∫–º</div>
            </div>
          </div>
          ` : ''}
          
          <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ -->
          <div style="margin: 8px 0; padding: 6px; background: #f3f4f6; border-radius: 4px; font-size: 10px; color: #6b7280; text-align: center;">
            üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${facility.lastUpdate || '–ù–µ–¥–∞–≤–Ω–æ'} | –¢—Ä–µ–Ω–¥: ${facility.trendValue || 0}% –∑–∞ –º–µ—Å—è—Ü
          </div>
          
          <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
          <div style="display: flex; gap: 6px; margin-top: 12px;">
            <button 
              onclick="console.log('–ö–Ω–æ–ø–∫–∞ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞–∂–∞—Ç–∞ –¥–ª—è ID:', '${facility.id}'); if(window.showFacilityDetails) { window.showFacilityDetails('${facility.id}'); } else { alert('–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); }"
              style="flex: 1; background: #10b981; color: white; border: none; padding: 8px 12px; border-radius: 6px; font-size: 11px; font-weight: 600; cursor: pointer; transition: all 0.2s;"
              onmouseover="this.style.background='#059669'"
              onmouseout="this.style.background='#10b981'"
            >
              üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
            </button>
            <button 
              onclick="console.log('–ö–Ω–æ–ø–∫–∞ –†–∞–¥–∏—É—Å –Ω–∞–∂–∞—Ç–∞ –¥–ª—è ID:', '${facility.id}'); if(window.toggleFacilityCoverage) { window.toggleFacilityCoverage('${facility.id}'); } else { alert('–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); }"
              style="flex: 1; background: ${iconConfig.color}; color: white; border: none; padding: 8px 12px; border-radius: 6px; font-size: 11px; font-weight: 600; cursor: pointer; transition: all 0.2s;"
              onmouseover="this.style.opacity='0.8'"
              onmouseout="this.style.opacity='1'"
              id="coverage-btn-${facility.id}"
            >
              üéØ –†–∞–¥–∏—É—Å
            </button>
          </div>
        </div>
      </div>
    `;
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø–∞–ø–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const createRecommendationPopup = (recommendation) => {
    const score = Math.round((recommendation.score || 0.85) * 100);
    const config = getFacilityIconConfig(recommendation.type);
    const priorityColors = {
      high: '#dc2626',
      medium: '#f59e0b',
      low: '#10b981'
    };
    const priorityLabels = {
      high: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
      medium: '–°—Ä–µ–¥–Ω–∏–π',
      low: '–ù–∏–∑–∫–∏–π'
    };
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö –∑–æ–Ω —à–∫–æ–ª
    if (recommendation.recommendation_type === 'gap_zone' && recommendation.type === 'school_gap') {
      return `
        <div style="padding: 0; min-width: 320px; max-width: 400px; font-family: system-ui, sans-serif;">
          <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —à–∫–æ–ª -->
          <div style="padding: 12px; background: linear-gradient(135deg, #10b981, #059669); color: white; margin: 0;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
              <div style="display: flex; align-items: center; gap: 8px;">
                <span style="font-size: 20px;">üè´</span>
                <div>
                  <h3 style="margin: 0; font-size: 16px; font-weight: bold; line-height: 1.2;">
                    –ù–æ–≤–∞—è —à–∫–æ–ª–∞ ‚Ññ${recommendation.facility_number || ''}
                  </h3>
                  <div style="font-size: 11px; opacity: 0.9;">${recommendation.district || '–†–∞–π–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                </div>
              </div>
              <div style="background: ${priorityColors[recommendation.priority || 'high']}; padding: 3px 8px; border-radius: 10px; font-size: 10px; font-weight: bold;">
                ${priorityLabels[recommendation.priority || 'high']}
              </div>
            </div>
          </div>
          
          <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–π —à–∫–æ–ª—ã -->
          <div style="padding: 12px; background: white;">
            <div style="margin-bottom: 12px; padding: 8px; background: #ecfdf5; border-radius: 6px; border-left: 3px solid #10b981;">
              <div style="font-size: 11px; color: #059669; font-weight: 600; margin-bottom: 3px;">–†–ê–ô–û–ù –ò –ü–û–ó–ò–¶–ò–Ø:</div>
              <div style="font-size: 12px; color: #047857; font-weight: 600; line-height: 1.3;">
                ${recommendation.description || `–®–∫–æ–ª–∞ ${recommendation.district_facility_number || 1} –∏–∑ ${recommendation.district_facilities_needed || 1} –≤ ${recommendation.district || '—Ä–∞–π–æ–Ω–µ'}`}
              </div>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 6px; margin-bottom: 12px;">
              <div style="background: #fef3c7; padding: 6px; border-radius: 4px; text-align: center;">
                <div style="font-size: 10px; color: #92400e; font-weight: 600;">–ü–†–ò–û–†–ò–¢–ï–¢ –í –†–ê–ô–û–ù–ï</div>
                <div style="font-size: 14px; color: #78350f; font-weight: bold;">
                  ${recommendation.district_facility_number || 1} –∏–∑ ${recommendation.district_facilities_needed || 1}
                </div>
                <div style="font-size: 9px; color: #451a03;">—à–∫–æ–ª —Ä–∞–π–æ–Ω–∞</div>
              </div>
              <div style="background: #ecfdf5; padding: 6px; border-radius: 4px; text-align: center;">
                <div style="font-size: 10px; color: #059669; font-weight: 600;">–û–ë–©–ò–ô –ü–õ–ê–ù</div>
                <div style="font-size: 14px; color: #047857; font-weight: bold;">
                  ${recommendation.facility_number || 1} –∏–∑ ${recommendation.total_needed || 1}
                </div>
                <div style="font-size: 9px; color: #065f46;">–≤—Å–µ–≥–æ —à–∫–æ–ª</div>
              </div>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 6px; margin-bottom: 12px;">
              <div style="background: #ddd6fe; padding: 6px; border-radius: 4px; text-align: center;">
                <div style="font-size: 10px; color: #6d28d9; font-weight: 600;">–û–•–í–ê–¢</div>
                <div style="font-size: 14px; color: #5b21b6; font-weight: bold;">
                  ${recommendation.estimated_capacity || 300}
                </div>
                <div style="font-size: 9px; color: #4c1d95;">—É—á–µ–Ω–∏–∫–æ–≤</div>
              </div>
              <div style="background: #fed7d7; padding: 6px; border-radius: 4px; text-align: center;">
                <div style="font-size: 10px; color: #c53030; font-weight: 600;">–†–ê–ô–û–ù</div>
                <div style="font-size: 11px; color: #9c2929; font-weight: bold; line-height: 1;">
                  ${recommendation.district ? recommendation.district.replace(' —Ä–∞–π–æ–Ω', '').replace(', –≥–æ—Ä–æ–¥ –ë–∏—à–∫–µ–∫, –ö–∏—Ä–≥–∏–∑–∏—è', '') : '–ù–µ —É–∫–∞–∑–∞–Ω'}
                </div>
                <div style="font-size: 9px; color: #742a2a;">—Ä–∞–π–æ–Ω</div>
              </div>
            </div>
            
            <div style="margin-bottom: 12px;">
              <div style="font-size: 11px; color: #6b7280; font-weight: 600; margin-bottom: 4px;">–û–ë–û–°–ù–û–í–ê–ù–ò–ï:</div>
              <div style="font-size: 12px; color: #374151; line-height: 1.4;">
                –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —à–∫–æ–ª—ã –≤ ${recommendation.district || '–¥–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ'} –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏
              </div>
            </div>
            
            <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
            <div style="border-top: 1px solid #e5e7eb; padding-top: 8px; margin-top: 8px;">
              <div style="font-size: 10px; color: #6b7280; font-weight: 600; margin-bottom: 6px;">üìä –ê–ù–ê–õ–ò–ó –õ–û–ö–ê–¶–ò–ò:</div>
              
              <div style="display: grid; grid-template-columns: 1fr; gap: 4px; margin-bottom: 8px;">
                <div style="background: #ecfdf5; padding: 4px; border-radius: 3px;">
                  <div style="font-size: 9px; color: #059669; font-weight: 600;">–°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê</div>
                  <div style="font-size: 10px; color: #047857;">
                    ${recommendation.priority === 'high' ? '–ü–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω–∞—è - —Å—Ä–æ—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è' :
                      recommendation.priority === 'medium' ? '–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –ª–µ—Ç' :
                      '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è - –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ'}
                  </div>
                </div>
              </div>
              
              <div style="margin-bottom: 8px;">
                <div style="font-size: 10px; color: #059669; font-weight: 600; margin-bottom: 4px;">‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:</div>
                <div style="font-size: 10px; color: #047857; line-height: 1.3;">
                  ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ ${recommendation.district || '—Ä–∞–π–æ–Ω–µ'}<br>
                  ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∫–æ–ª—ã<br>
                  ‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–π–æ–Ω–∞
                </div>
              </div>
            </div>
            
            <!-- –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è -->
            <div style="margin-top: 12px; border-top: 1px solid #e5e7eb; padding-top: 8px;">
              <button 
                onclick="console.log('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —à–∫–æ–ª—ã –≤ —Ä–∞–π–æ–Ω–µ:', '${recommendation.district}', '—à–∫–æ–ª–∞ ‚Ññ${recommendation.facility_number}');"
                style="width: 100%; background: #10b981; color: white; border: none; padding: 8px 12px; border-radius: 6px; font-size: 11px; font-weight: 600; cursor: pointer; transition: all 0.2s;"
                onmouseover="this.style.opacity='0.8'"
                onmouseout="this.style.opacity='1'"
              >
                üìã –ü–ª–∞–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ ${recommendation.district ? recommendation.district.replace(' —Ä–∞–π–æ–Ω', '').replace(', –≥–æ—Ä–æ–¥ –ë–∏—à–∫–µ–∫, –ö–∏—Ä–≥–∏–∑–∏—è', '') : '—Ä–∞–π–æ–Ω–µ'}
              </button>
            </div>
          </div>
        </div>
      `;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö –∑–æ–Ω –∫–ª–∏–Ω–∏–∫
    if (recommendation.recommendation_type === 'gap_zone' && recommendation.type === 'clinic_gap') {
      return `
        <div style="padding: 0; min-width: 320px; max-width: 400px; font-family: system-ui, sans-serif;">
          <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–Ω–∏–∫ -->
          <div style="padding: 12px; background: linear-gradient(135deg, #7c3aed, #5b21b6); color: white; margin: 0;">
            <div style="display: flex; align-items: center; justify-content: space-between;">
              <div style="display: flex; align-items: center; gap: 8px;">
                <span style="font-size: 20px;">‚öïÔ∏è</span>
                <div>
                  <h3 style="margin: 0; font-size: 16px; font-weight: bold; line-height: 1.2;">
                    –ù–æ–≤–∞—è –∫–ª–∏–Ω–∏–∫–∞ ‚Ññ${recommendation.facility_number || ''}
                  </h3>
                  <div style="font-size: 11px; opacity: 0.9;">${recommendation.district ? recommendation.district.replace(', –≥–æ—Ä–æ–¥ –ë–∏—à–∫–µ–∫, –ö–∏—Ä–≥–∏–∑–∏—è', '') : '–†–∞–π–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                </div>
              </div>
              <div style="background: ${priorityColors[recommendation.priority || 'high']}; padding: 3px 8px; border-radius: 10px; font-size: 10px; font-weight: bold;">
                ${priorityLabels[recommendation.priority || 'high']}
              </div>
            </div>
          </div>
          
          <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∫–ª–∏–Ω–∏–∫–∏ -->
          <div style="padding: 12px; background: white;">
            <div style="margin-bottom: 12px; padding: 8px; background: #f3e8ff; border-radius: 6px; border-left: 3px solid #7c3aed;">
              <div style="font-size: 11px; color: #6d28d9; font-weight: 600; margin-bottom: 3px;">–†–ê–ô–û–ù –ò –ü–û–ó–ò–¶–ò–Ø:</div>
              <div style="font-size: 12px; color: #5b21b6; font-weight: 600; line-height: 1.3;">
                ${recommendation.description || `–ö–ª–∏–Ω–∏–∫–∞ ${recommendation.district_facility_number || 1} –∏–∑ ${recommendation.district_facilities_needed || 1} –≤ ${recommendation.district || '—Ä–∞–π–æ–Ω–µ'}`}
              </div>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 6px; margin-bottom: 12px;">
              <div style="background: #fef3c7; padding: 6px; border-radius: 4px; text-align: center;">
                <div style="font-size: 10px; color: #92400e; font-weight: 600;">–ü–†–ò–û–†–ò–¢–ï–¢ –í –†–ê–ô–û–ù–ï</div>
                <div style="font-size: 14px; color: #78350f; font-weight: bold;">
                  ${recommendation.district_facility_number || 1} –∏–∑ ${recommendation.district_facilities_needed || 1}
                </div>
                <div style="font-size: 9px; color: #451a03;">–∫–ª–∏–Ω–∏–∫ —Ä–∞–π–æ–Ω–∞</div>
              </div>
              <div style="background: #f3e8ff; padding: 6px; border-radius: 4px; text-align: center;">
                <div style="font-size: 10px; color: #7c3aed; font-weight: 600;">–û–ë–©–ò–ô –ü–õ–ê–ù</div>
                <div style="font-size: 14px; color: #5b21b6; font-weight: bold;">
                  ${recommendation.facility_number || 1} –∏–∑ ${recommendation.total_needed || 1}
                </div>
                <div style="font-size: 9px; color: #4c1d95;">–≤—Å–µ–≥–æ –∫–ª–∏–Ω–∏–∫</div>
              </div>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 6px; margin-bottom: 12px;">
              <div style="background: #ddd6fe; padding: 6px; border-radius: 4px; text-align: center;">
                <div style="font-size: 10px; color: #6d28d9; font-weight: 600;">–û–•–í–ê–¢</div>
                <div style="font-size: 14px; color: #5b21b6; font-weight: bold;">
                  ${recommendation.estimated_capacity || 200}
                </div>
                <div style="font-size: 9px; color: #4c1d95;">–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤/–¥–µ–Ω—å</div>
              </div>
              <div style="background: #fed7d7; padding: 6px; border-radius: 4px; text-align: center;">
                <div style="font-size: 10px; color: #c53030; font-weight: 600;">–†–ê–ô–û–ù</div>
                <div style="font-size: 11px; color: #9c2929; font-weight: bold; line-height: 1;">
                  ${recommendation.district ? recommendation.district.replace(' —Ä–∞–π–æ–Ω', '').replace(', –≥–æ—Ä–æ–¥ –ë–∏—à–∫–µ–∫, –ö–∏—Ä–≥–∏–∑–∏—è', '') : '–ù–µ —É–∫–∞–∑–∞–Ω'}
                </div>
                <div style="font-size: 9px; color: #742a2a;">—Ä–∞–π–æ–Ω</div>
              </div>
            </div>
            
            <div style="margin-bottom: 12px;">
              <div style="font-size: 11px; color: #6b7280; font-weight: 600; margin-bottom: 4px;">–û–ë–û–°–ù–û–í–ê–ù–ò–ï:</div>
              <div style="font-size: 12px; color: #374151; line-height: 1.4;">
                –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∏ –≤ ${recommendation.district || '–¥–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ'} –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥
              </div>
            </div>
            
            <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
            <div style="border-top: 1px solid #e5e7eb; padding-top: 8px; margin-top: 8px;">
              <div style="font-size: 10px; color: #6b7280; font-weight: 600; margin-bottom: 6px;">üìä –ê–ù–ê–õ–ò–ó –õ–û–ö–ê–¶–ò–ò:</div>
              
              <div style="display: grid; grid-template-columns: 1fr; gap: 4px; margin-bottom: 8px;">
                <div style="background: #f3e8ff; padding: 4px; border-radius: 3px;">
                  <div style="font-size: 9px; color: #7c3aed; font-weight: 600;">–°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê</div>
                  <div style="font-size: 10px; color: #5b21b6;">
                    ${recommendation.priority === 'high' ? '–ü–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω–∞—è - —Å—Ä–æ—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è' :
                      recommendation.priority === 'medium' ? '–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –ª–µ—Ç' :
                      '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è - –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ'}
                  </div>
                </div>
              </div>
              
              <div style="margin-bottom: 8px;">
                <div style="font-size: 10px; color: #7c3aed; font-weight: 600; margin-bottom: 4px;">‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:</div>
                <div style="font-size: 10px; color: #5b21b6; line-height: 1.3;">
                  ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥ –≤ ${recommendation.district || '—Ä–∞–π–æ–Ω–µ'}<br>
                  ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è<br>
                  ‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è
                </div>
              </div>
            </div>
            
            <!-- –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è -->
            <div style="margin-top: 12px; border-top: 1px solid #e5e7eb; padding-top: 8px;">
              <button 
                onclick="console.log('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∫–ª–∏–Ω–∏–∫–∏ –≤ —Ä–∞–π–æ–Ω–µ:', '${recommendation.district}', '–∫–ª–∏–Ω–∏–∫–∞ ‚Ññ${recommendation.facility_number}');"
                style="width: 100%; background: #7c3aed; color: white; border: none; padding: 8px 12px; border-radius: 6px; font-size: 11px; font-weight: 600; cursor: pointer; transition: all 0.2s;"
                onmouseover="this.style.opacity='0.8'"
                onmouseout="this.style.opacity='1'"
              >
                üìã –ü–ª–∞–Ω —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ ${recommendation.district ? recommendation.district.replace(' —Ä–∞–π–æ–Ω', '').replace(', –≥–æ—Ä–æ–¥ –ë–∏—à–∫–µ–∫, –ö–∏—Ä–≥–∏–∑–∏—è', '') : '—Ä–∞–π–æ–Ω–µ'}
              </button>
            </div>
          </div>
        </div>
      `;
    }
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    return `
      <div style="padding: 0; min-width: 300px; max-width: 380px; font-family: system-ui, sans-serif;">
        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
        <div style="padding: 12px; background: ${config.color}; color: white; margin: 0;">
          <div style="display: flex; align-items: center; justify-content: space-between;">
            <div style="display: flex; align-items: center; gap: 8px;">
              <span style="font-size: 20px;">${config.symbol}</span>
              <div>
                <h3 style="margin: 0; font-size: 16px; font-weight: bold; line-height: 1.2;">
                  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                </h3>
                <div style="font-size: 11px; opacity: 0.9;">${config.name}</div>
              </div>
            </div>
            <div style="background: ${priorityColors[recommendation.priority || 'medium']}; padding: 3px 8px; border-radius: 10px; font-size: 10px; font-weight: bold;">
              ${priorityLabels[recommendation.priority || 'medium']}
            </div>
          </div>
        </div>
        
        <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
        <div style="padding: 12px; background: white;">
          ${recommendation.recommendation ? `
          <div style="margin-bottom: 12px; padding: 8px; background: #f8fafc; border-radius: 6px; border-left: 3px solid ${config.color};">
            <div style="font-size: 11px; color: #6b7280; font-weight: 600; margin-bottom: 3px;">–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:</div>
            <div style="font-size: 12px; color: #374151; font-weight: 600; line-height: 1.3;">${recommendation.recommendation}</div>
          </div>
          ` : ''}
          
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 6px; margin-bottom: 12px;">
            <div style="background: #ecfdf5; padding: 6px; border-radius: 4px; text-align: center;">
              <div style="font-size: 10px; color: #059669; font-weight: 600;">–û–•–í–ê–¢</div>
              <div style="font-size: 14px; color: #047857; font-weight: bold;">${(recommendation.estimated_coverage || 15000).toLocaleString()}</div>
              <div style="font-size: 9px; color: #065f46;">—á–µ–ª.</div>
            </div>
            <div style="background: #eff6ff; padding: 6px; border-radius: 4px; text-align: center;">
              <div style="font-size: 10px; color: #2563eb; font-weight: 600;">–≠–§–§–ï–ö–¢</div>
              <div style="font-size: 14px; color: #1e40af; font-weight: bold;">${score}%</div>
              <div style="font-size: 9px; color: #1e3a8a;">–æ—Ü–µ–Ω–∫–∞</div>
            </div>
          </div>
          
          <div style="margin-bottom: 12px;">
            <div style="font-size: 11px; color: #6b7280; font-weight: 600; margin-bottom: 4px;">–û–ë–û–°–ù–û–í–ê–ù–ò–ï:</div>
            <div style="font-size: 12px; color: #374151; line-height: 1.4;">${recommendation.reason || '–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞'}</div>
          </div>
          
          <!-- –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ -->
          ${recommendation.detailedAnalysis ? `
          <div style="border-top: 1px solid #e5e7eb; padding-top: 8px; margin-top: 8px;">
            <div style="font-size: 10px; color: #6b7280; font-weight: 600; margin-bottom: 6px;">üìä –ö–õ–Æ–ß–ï–í–´–ï –î–ê–ù–ù–´–ï:</div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 4px; margin-bottom: 8px;">
              <div style="background: #fef3c7; padding: 4px; border-radius: 3px;">
                <div style="font-size: 9px; color: #92400e; font-weight: 600;">–ü–õ–û–¢–ù–û–°–¢–¨</div>
                <div style="font-size: 10px; color: #78350f;">${recommendation.detailedAnalysis.populationDensity}</div>
              </div>
              <div style="background: #fde2e8; padding: 4px; border-radius: 3px;">
                <div style="font-size: 9px; color: #be185d; font-weight: 600;">–ë–õ–ò–ñ–ê–ô–®–ò–ô</div>
                <div style="font-size: 10px; color: #9d174d;">${
                  recommendation.detailedAnalysis.nearestSchool || 
                  recommendation.detailedAnalysis.nearestHospital || 
                  recommendation.detailedAnalysis.nearestPolyclinic ||
                  recommendation.detailedAnalysis.nearestClinic ||
                  recommendation.detailedAnalysis.nearestFireStation ||
                  recommendation.detailedAnalysis.nearestPoliceStation ||
                  recommendation.detailedAnalysis.nearestPostOffice ||
                  '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                }</div>
              </div>
            </div>
            
            ${recommendation.detailedAnalysis.benefits && recommendation.detailedAnalysis.benefits.length > 0 ? `
            <div style="margin-bottom: 8px;">
              <div style="font-size: 10px; color: #059669; font-weight: 600; margin-bottom: 4px;">‚úÖ –ì–õ–ê–í–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:</div>
              <div style="font-size: 10px; color: #047857; line-height: 1.3;">
                ‚Ä¢ ${recommendation.detailedAnalysis.benefits.slice(0, 2).join('<br>‚Ä¢ ')}
                ${recommendation.detailedAnalysis.benefits.length > 2 ? '<br>‚Ä¢ –ò –¥—Ä—É–≥–∏–µ...' : ''}
              </div>
            </div>
            ` : ''}
          </div>
          ` : ''}
          
          <!-- –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è -->
          <div style="margin-top: 12px; border-top: 1px solid #e5e7eb; padding-top: 8px;">
            <button 
              onclick="console.log('–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', '${recommendation.id}'); if(window.showDetailedPlacementAnalysis) { window.showDetailedPlacementAnalysis(${JSON.stringify(recommendation.detailedAnalysis)}); } else { console.error('showDetailedPlacementAnalysis –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); }"
              style="width: 100%; background: ${config.color}; color: white; border: none; padding: 8px 12px; border-radius: 6px; font-size: 11px; font-weight: 600; cursor: pointer; transition: all 0.2s;"
              onmouseover="this.style.opacity='0.8'"
              onmouseout="this.style.opacity='1'"
            >
              üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            </button>
          </div>
        </div>
      </div>
    `;
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  const createDetailedAnalysisModal = (analysis) => {
    const config = getFacilityIconConfig(analysis.type || 'school');

    return `
      <div style="
        background: white;
        border-radius: 16px;
        max-width: 900px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        animation: slideIn 0.3s ease-out;
      ">
        <!-- Header -->
        <div style="
          background: ${config.color};
          color: white;
          padding: 20px 24px;
          border-radius: 16px 16px 0 0;
          position: relative;
          overflow: hidden;
        ">
          <div style="position: relative; z-index: 2;">
          <div style="display: flex; align-items: center; justify-content: space-between;">
              <div>
                <h2 style="margin: 0; font-size: 20px; font-weight: bold;">
                  ${config.symbol} –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                </h2>
                <p style="margin: 4px 0 0 0; opacity: 0.9; font-size: 14px;">
                  –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è ${config.name.toLowerCase()}
                </p>
            </div>
            <button 
              onclick="this.closest('[style*=\"position: fixed\"]').remove()"
              style="
                background: rgba(255, 255, 255, 0.2);
                border: none;
                color: white;
                width: 32px;
                height: 32px;
                  border-radius: 8px;
                cursor: pointer;
                font-size: 18px;
                display: flex;
                align-items: center;
                justify-content: center;
                "
              >√ó</button>
          </div>
          </div>
          <div style="
            position: absolute;
            top: -50%;
            right: -20%;
            width: 200px;
            height: 200px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
          "></div>
        </div>

        <div style="padding: 24px;">
          <!-- –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ -->
          <div style="
            background: linear-gradient(135deg, #f8fafc, #e2e8f0);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 24px;
            border-left: 4px solid ${config.color};
          ">
            <h3 style="margin: 0 0 12px 0; color: #1f2937; font-size: 18px;">
              üìã –†–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞
            </h3>
            <p style="margin: 0; color: #4b5563; line-height: 1.6; font-size: 14px;">
              ${analysis.recommendation || '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.'}
            </p>
            <div style="
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
              gap: 16px;
              margin-top: 16px;
            ">
              <div style="text-align: center;">
                <div style="font-size: 24px; font-weight: bold; color: ${config.color};">
                  ${Math.round((analysis.score || 0.85) * 100)}%
                </div>
                <div style="font-size: 12px; color: #6b7280;">–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</div>
              </div>
              <div style="text-align: center;">
                <div style="font-size: 24px; font-weight: bold; color: #10b981;">
                  ${analysis.estimated_coverage?.toLocaleString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                </div>
                <div style="font-size: 12px; color: #6b7280;">–û—Ö–≤–∞—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏—è</div>
              </div>
              <div style="text-align: center;">
                <div style="font-size: 24px; font-weight: bold; color: #f59e0b;">
                  ${analysis.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' : analysis.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'}
                </div>
                <div style="font-size: 12px; color: #6b7280;">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</div>
              </div>
            </div>
          </div>

          <!-- –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∞–Ω–∞–ª–∏–∑–∞ -->
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px; margin-bottom: 24px;">
            <!-- –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ -->
            <div style="background: white; border: 1px solid #e5e7eb; border-radius: 12px; padding: 20px;">
              <h3 style="margin: 0 0 16px 0; color: #1f2937; font-size: 16px; display: flex; align-items: center;">
              üë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            </h3>
              
              <div style="space-y: 12px;">
                <div style="margin-bottom: 12px;">
                  <div style="font-size: 14px; color: #374151; font-weight: 600; margin-bottom: 8px;">
                    –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è: ${analysis.population_density || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —á–µ–ª/–∫–º¬≤
                  </div>
                </div>
                
                <div style="margin-bottom: 12px;">
                  <div style="font-size: 14px; color: #374151; font-weight: 600; margin-bottom: 8px;">
                    –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${analysis.target_audience || '–û–±—â–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è'}
                  </div>
                  </div>
                </div>
              </div>
              
            <!-- –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ -->
            <div style="background: white; border: 1px solid #e5e7eb; border-radius: 12px; padding: 20px;">
              <h3 style="margin: 0 0 16px 0; color: #1f2937; font-size: 16px; display: flex; align-items: center;">
                üèóÔ∏è –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
              </h3>
              
              <div style="space-y: 12px;">
                <div style="margin-bottom: 12px;">
                  <div style="font-size: 14px; color: #374151; font-weight: 600; margin-bottom: 8px;">
                    –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${analysis.transport_access || '–û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è'}
                  </div>
                </div>
                
                <div style="margin-bottom: 12px;">
                  <div style="font-size: 14px; color: #374151; font-weight: 600; margin-bottom: 8px;">
                    –ë–ª–∏–∂–∞–π—à–∏–µ –æ–±—ä–µ–∫—Ç—ã: ${analysis.nearby_facilities || '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è'}
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
          <div style="background: #f8fafc; border-radius: 12px; padding: 20px; border-left: 4px solid #10b981;">
            <h3 style="margin: 0 0 12px 0; color: #1f2937; font-size: 16px;">
              ‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </h3>
            <ul style="margin: 0; padding-left: 20px; color: #4b5563; line-height: 1.6;">
              <li>–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–æ</li>
              <li>–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±–µ—Å–ø–µ—á–∏—Ç —Ö–æ—Ä–æ—à–∏–π —Ç—Ä–∞—Ñ–∏–∫</li>
              <li>–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏</li>
              <li>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—á–µ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</li>
              <li>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É</li>
            </ul>
          </div>
        </div>
      </div>

      <style>
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        @keyframes slideIn {
          from { transform: translateY(-20px); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }
      </style>
    `;
  };

  return (
    <div className="h-full w-full relative">
      <div ref={mapRef} className="h-full w-full" />
      
      {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className={`absolute bottom-4 right-4 backdrop-blur-md rounded-xl shadow-xl border p-3 z-[1000] transition-all duration-300 transform hover:scale-105 ${
        showFullLegend ? 'max-w-80' : 'max-w-60'
      } ${
        darkMode 
          ? 'bg-gray-900/95 border-gray-700 text-white' 
          : 'bg-white/95 border-gray-200 text-gray-900'
      }`}>
        {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center space-x-2">
            <div className={`p-1.5 rounded-lg ${darkMode ? 'bg-blue-600/20' : 'bg-blue-50'}`}>
              <div className="w-4 h-4 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center">
                <span className="text-white text-xs">üìä</span>
              </div>
            </div>
            <div>
              <h4 className={`text-xs font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </h4>
              <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} flex items-center space-x-1`}>
                <div className="w-1.5 h-1.5 bg-green-500 rounded-full animate-pulse"></div>
                <span>{facilities.length} –æ–±—ä–µ–∫—Ç–æ–≤</span>
              </div>
            </div>
          </div>
          
          <button
            onClick={() => setShowFullLegend(!showFullLegend)}
            className={`p-1.5 rounded-lg transition-all duration-300 hover:scale-110 ${
              darkMode 
                ? 'bg-gray-800 hover:bg-gray-700 text-gray-300' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-600'
            }`}
            title={showFullLegend ? "–°–≤–µ—Ä–Ω—É—Ç—å" : "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"}
          >
            <div className={`transform transition-transform duration-300 ${showFullLegend ? 'rotate-180' : ''}`}>
              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </div>
          </button>
        </div>
        
        {showFullLegend ? (
          // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          <div className="space-y-2 animate-fadeIn">
            {/* –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ */}
            <div className="space-y-1.5">
              {[
                { type: 'school', name: '–®–∫–æ–ª—ã', icon: 'üè´', color: 'from-emerald-500 to-emerald-600', bgColor: 'bg-emerald-50', textColor: 'text-emerald-700' },
                { type: 'hospital', name: '–ë–æ–ª—å–Ω–∏—Ü—ã', icon: 'üè•', color: 'from-red-500 to-red-600', bgColor: 'bg-red-50', textColor: 'text-red-700' },
                { type: 'polyclinic', name: '–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏', icon: 'üè®', color: 'from-blue-500 to-blue-600', bgColor: 'bg-blue-50', textColor: 'text-blue-700' },
                { type: 'clinic', name: '–ö–ª–∏–Ω–∏–∫–∏', icon: '‚öïÔ∏è', color: 'from-purple-500 to-purple-600', bgColor: 'bg-purple-50', textColor: 'text-purple-700' },
                { type: 'fire_station', name: '–ü–æ–∂–∞—Ä–Ω—ã–µ', icon: 'üöí', color: 'from-orange-500 to-orange-600', bgColor: 'bg-orange-50', textColor: 'text-orange-700' },
                { type: 'police_station', name: '–ü–æ–ª–∏—Ü–∏—è', icon: 'üöî', color: 'from-gray-600 to-gray-700', bgColor: 'bg-gray-50', textColor: 'text-gray-700' },
                { type: 'post_office', name: '–ü–æ—á—Ç–∞', icon: 'üìÆ', color: 'from-green-500 to-green-600', bgColor: 'bg-green-50', textColor: 'text-green-700' }
              ].map((category) => {
                const count = facilities.filter(f => f.type === category.type).length;
                const percentage = facilities.length > 0 ? (count / facilities.length) * 100 : 0;
                
                return (
                  <div 
                    key={category.type}
                    className={`relative overflow-hidden rounded-lg p-2 transition-all duration-300 hover:scale-102 cursor-pointer ${
                      darkMode ? 'bg-gray-800/50 hover:bg-gray-800/70' : `${category.bgColor} hover:shadow-sm`
                    }`}
                  >
                    <div className="flex items-center justify-between relative z-10">
                      <div className="flex items-center space-x-2">
                        <div className={`w-7 h-7 rounded-lg bg-gradient-to-r ${category.color} flex items-center justify-center shadow-sm`}>
                          <span className="text-white text-sm">{category.icon}</span>
                        </div>
                        <div>
                          <div className={`text-xs font-semibold ${darkMode ? 'text-white' : category.textColor}`}>
                            {category.name}
                          </div>
                          <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                            {percentage.toFixed(1)}% –æ—Ç –æ–±—â–µ–≥–æ
                          </div>
                        </div>
                      </div>
                      
                      <div className="text-right">
                        <div className={`text-lg font-bold ${darkMode ? 'text-white' : category.textColor}`}>
                          {count}
                        </div>
                      </div>
                    </div>
                    
                    {/* –ú–∏–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
                    <div className={`mt-1 h-1 rounded-full overflow-hidden ${darkMode ? 'bg-gray-700' : 'bg-white/50'}`}>
                      <div 
                        className={`h-full bg-gradient-to-r ${category.color} transition-all duration-1000 ease-out`}
                        style={{ width: `${percentage}%` }}
                      ></div>
                    </div>
                  </div>
                );
              })}
            </div>
            
            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –∫–æ–º–ø–∞–∫—Ç–Ω–æ */}
            {recommendations && recommendations.length > 0 && (
              <div className={`rounded-lg p-2 border border-dashed transition-all duration-300 hover:scale-102 ${
                darkMode 
                  ? 'border-purple-600/50 bg-purple-900/20' 
                  : 'border-purple-300 bg-purple-50'
              }`}>
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <div className="w-7 h-7 rounded-lg bg-gradient-to-r from-purple-500 to-pink-600 flex items-center justify-center shadow-sm animate-pulse">
                      <span className="text-white text-sm">‚≠ê</span>
                    </div>
                    <div>
                      <div className={`text-xs font-semibold ${darkMode ? 'text-purple-300' : 'text-purple-700'}`}>
                        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                      </div>
                    </div>
                  </div>
                  
                  <div className={`text-lg font-bold ${darkMode ? 'text-purple-300' : 'text-purple-700'}`}>
                    {recommendations.length}
                  </div>
                </div>
              </div>
            )}
            
            {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
            <div className={`rounded-lg p-2 ${
              darkMode ? 'bg-gradient-to-r from-gray-800/50 to-gray-700/50' : 'bg-gradient-to-r from-gray-50 to-gray-100'
            }`}>
              <div className={`text-xs font-semibold mb-1 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
              </div>
              <div className="grid grid-cols-2 gap-2 text-xs">
                <div className="text-center">
                  <div className={`font-bold text-sm ${darkMode ? 'text-blue-400' : 'text-blue-600'}`}>
                    {Math.round(facilities.reduce((sum, f) => sum + (f.rating || 4.2), 0) / facilities.length * 20)}%
                  </div>
                  <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>–ö–∞—á–µ—Å—Ç–≤–æ</div>
                </div>
                <div className="text-center">
                  <div className={`font-bold text-sm ${darkMode ? 'text-green-400' : 'text-green-600'}`}>
                    {facilities.length > 0 ? Math.round(facilities.length / 10 * 100) : 0}%
                  </div>
                  <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>–ü–æ–∫—Ä—ã—Ç–∏–µ</div>
                </div>
              </div>
            </div>
          </div>
        ) : (
          // –£–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
          <div className="animate-fadeIn">
            <div className="grid grid-cols-3 gap-2">
              {[
                { type: 'school', icon: 'üè´', color: 'from-emerald-500 to-emerald-600' },
                { type: 'hospital', icon: 'üè•', color: 'from-red-500 to-red-600' },
                { type: 'polyclinic', icon: 'üè®', color: 'from-blue-500 to-blue-600' },
                { type: 'clinic', icon: '‚öïÔ∏è', color: 'from-purple-500 to-purple-600' },
                { type: 'fire_station', icon: 'üöí', color: 'from-orange-500 to-orange-600' },
                { type: 'police_station', icon: 'üöî', color: 'from-gray-600 to-gray-700' }
              ].map((category) => {
                const count = facilities.filter(f => f.type === category.type).length;
                
                return (
                  <div 
                    key={category.type}
                    className="text-center group cursor-pointer"
                    onClick={() => setShowFullLegend(true)}
                  >
                    <div className={`w-8 h-8 rounded-lg bg-gradient-to-r ${category.color} flex items-center justify-center mx-auto mb-1 shadow-sm transform transition-all duration-300 group-hover:scale-110`}>
                      <span className="text-white text-sm">{category.icon}</span>
                    </div>
                    <div className={`font-bold text-sm ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                      {count}
                    </div>
                  </div>
                );
              })}
            </div>
            
            {/* –ú–∏–Ω–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è */}
            <div className={`mt-2 text-center text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              <div className="flex items-center justify-center space-x-1">
                <span>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</span>
                <svg className="w-2 h-2 animate-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </div>
          </div>
        )}
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π */}
        {selectedFacilityId && (
          <div className={`border-t pt-2 mt-2 ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-1.5">
                <div className="relative">
                  <div className="w-2 h-2 rounded-full bg-gradient-to-r from-orange-400 to-red-500 animate-pulse"></div>
                  <div className="absolute inset-0 w-2 h-2 rounded-full bg-orange-400 animate-ping opacity-75"></div>
                </div>
                <span className={`text-xs font-medium truncate max-w-24 ${darkMode ? 'text-orange-300' : 'text-orange-700'}`}>
                  {facilities.find(f => f.id === selectedFacilityId)?.name || '–í—ã–±—Ä–∞–Ω'}
                </span>
              </div>
              <button 
                onClick={() => setSelectedFacilityId(null)}
                className={`p-0.5 rounded transition-all duration-200 hover:scale-110 ${
                  darkMode 
                    ? 'text-red-400 hover:bg-red-900/20' 
                    : 'text-red-500 hover:bg-red-50'
                }`}
                title="–°–∫—Ä—ã—Ç—å —Ä–∞–¥–∏—É—Å"
              >
                <svg className="w-2.5 h-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default InteractiveMap; 