import React, { useState, useEffect } from 'react';
import InteractiveMap from './InteractiveMap';
import ControlPanel from './ControlPanel';
import ResultsPanel from './ResultsPanel';
import MobilePanelToggle from './MobilePanelToggle';
import MobileAccordion, { MobileAccordionGroup, GroupedAccordionItem } from './MobileAccordion';
import { useResponsive, useMobilePanels } from '../hooks/useResponsive';
import { 
  Settings, 
  BarChart3, 
  Map, 
  Filter,
  Search,
  Info
} from 'lucide-react';

// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const MobileLayoutExample = () => {
  const responsive = useResponsive();
  const {
    isMobile,
    isTablet,
    isDesktop,
    shouldUseMobileLayout,
    shouldUseCompactLayout,
    shouldShowPanelToggles,
    shouldUseTouchFriendlyElements
  } = responsive;

  const {
    showControlPanel,
    showResultsPanel,
    toggleControlPanel,
    toggleResultsPanel
  } = useMobilePanels(isMobile);

  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
  const [selectedFacilityType, setSelectedFacilityType] = useState('school');
  const [travelTime, setTravelTime] = useState(15);
  const [isLoading, setIsLoading] = useState(false);
  const [facilities, setFacilities] = useState([]);
  const [recommendations, setRecommendations] = useState([]);

  // –ö–ª–∞—Å—Å—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const appContainerClasses = [
    'app-container',
    'relative',
    'h-screen',
    'w-full',
    'overflow-hidden',
    isMobile ? 'mobile-layout' : '',
    shouldUseCompactLayout ? 'compact-layout' : '',
    responsive.isIOS ? 'ios-device' : '',
    responsive.isTouchDevice ? 'touch-device' : ''
  ].filter(Boolean).join(' ');

  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –ø–∞–Ω–µ–ª–µ–π
  const getControlPanelClasses = () => {
    if (!shouldUseMobileLayout) {
      return 'control-panel desktop-layout';
    }
    
    return [
      'control-panel',
      'slide-in-top',
      showControlPanel ? 'visible' : 'hidden',
      responsive.isSmallMobile ? 'small-mobile' : '',
      responsive.isLandscape && isMobile ? 'landscape-mobile' : ''
    ].filter(Boolean).join(' ');
  };

  const getResultsPanelClasses = () => {
    if (!shouldUseMobileLayout) {
      return 'results-panel desktop-layout';
    }
    
    return [
      'results-panel',
      'slide-in-bottom',
      showResultsPanel ? 'visible' : 'hidden',
      responsive.isSmallMobile ? 'small-mobile' : '',
      responsive.isLandscape && isMobile ? 'landscape-mobile' : ''
    ].filter(Boolean).join(' ');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const handleGenerateRecommendations = async () => {
    try {
      setIsLoading(true);
      
      // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      if (isMobile) {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        toggleControlPanel();
        if (!showResultsPanel) {
          toggleResultsPanel();
        }
      }
      
      // –≠–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      setRecommendations([
        { id: 1, coordinates: [42.8746, 74.5698], score: 0.85 },
        { id: 2, coordinates: [42.8656, 74.5789], score: 0.78 }
      ]);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={appContainerClasses}>
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ */}
      <div className="map-container w-full h-full">
        <InteractiveMap
          facilities={facilities}
          populationData={[]}
          recommendations={recommendations}
          activeLayers={{ facilities: true, population: true, recommendations: true }}
          selectedFacilityType={selectedFacilityType}
          onFacilityClick={(facility) => console.log('Facility clicked:', facility)}
          isMobile={isMobile}
          isCompact={shouldUseCompactLayout}
        />
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
      {shouldShowPanelToggles && (
        <MobilePanelToggle
          showControlPanel={showControlPanel}
          showResultsPanel={showResultsPanel}
          onToggleControlPanel={toggleControlPanel}
          onToggleResultsPanel={toggleResultsPanel}
          isMobile={isMobile}
        />
      )}

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className={getControlPanelClasses()}>
        {shouldUseMobileLayout ? (
          // –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞–º–∏
          <MobileLayoutControlPanel
            selectedFacilityType={selectedFacilityType}
            setSelectedFacilityType={setSelectedFacilityType}
            travelTime={travelTime}
            setTravelTime={setTravelTime}
            onGenerateRecommendations={handleGenerateRecommendations}
            isLoading={isLoading}
            isCompact={shouldUseCompactLayout}
          />
        ) : (
          // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è
          <ControlPanel
            selectedFacilityType={selectedFacilityType}
            setSelectedFacilityType={setSelectedFacilityType}
            travelTime={travelTime}
            setTravelTime={setTravelTime}
            onGenerateRecommendations={handleGenerateRecommendations}
            isLoading={isLoading}
          />
        )}
      </div>

      {/* –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      {(showResultsPanel || !shouldUseMobileLayout) && (
        <div className={getResultsPanelClasses()}>
          <ResultsPanel
            recommendations={recommendations}
            statistics={null}
            isLoading={isLoading}
            isMobile={shouldUseMobileLayout}
            isCompact={shouldUseCompactLayout}
          />
        </div>
      )}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) */}
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-2 left-2 z-50 bg-black text-white text-xs px-2 py-1 rounded mobile:bg-red-500 tablet:bg-yellow-500 desktop:bg-green-500">
          {responsive.currentBreakpoint} - {responsive.screenSize.width}x{responsive.screenSize.height}
          {responsive.isLandscape ? ' (L)' : ' (P)'}
        </div>
      )}
    </div>
  );
};

// –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞–º–∏
const MobileLayoutControlPanel = ({
  selectedFacilityType,
  setSelectedFacilityType,
  travelTime,
  setTravelTime,
  onGenerateRecommendations,
  isLoading,
  isCompact
}) => {
  return (
    <div className="p-4 space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center gap-2 mb-4">
        <Settings className="w-5 h-5 text-primary-500" />
        <h2 className="text-lg font-semibold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
      </div>

      {/* –ê–∫–∫–æ—Ä–¥–µ–æ–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ */}
      <MobileAccordionGroup allowMultiple={false}>
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <GroupedAccordionItem
          title="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
          icon={<Filter className="w-4 h-4" />}
          defaultOpen={true}
        >
          <div className="space-y-4">
            {/* –¢–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è */}
            <div>
              <label className="block text-sm font-medium mb-2">
                –¢–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
              </label>
              <select 
                value={selectedFacilityType}
                onChange={(e) => setSelectedFacilityType(e.target.value)}
                className="input-field prevent-zoom"
              >
                <option value="school">üè´ –®–∫–æ–ª—ã</option>
                <option value="hospital">üè• –ë–æ–ª—å–Ω–∏—Ü—ã</option>
                <option value="fire_station">üöí –ü–æ–∂–∞—Ä–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏</option>
              </select>
            </div>

            {/* –í—Ä–µ–º—è –¥–æ–µ–∑–¥–∞ */}
            <div>
              <label className="block text-sm font-medium mb-2">
                –í—Ä–µ–º—è –¥–æ–µ–∑–¥–∞: {travelTime} –º–∏–Ω
              </label>
              <input
                type="range"
                min="5"
                max="30"
                value={travelTime}
                onChange={(e) => setTravelTime(Number(e.target.value))}
                className="slider-modern w-full"
              />
              <div className="flex justify-between text-xs text-gray-500 mt-1">
                <span>5 –º–∏–Ω</span>
                <span>30 –º–∏–Ω</span>
              </div>
            </div>
          </div>
        </GroupedAccordionItem>

        {/* –ü–æ–∏—Å–∫ */}
        <GroupedAccordionItem
          title="–ü–æ–∏—Å–∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π"
          icon={<Search className="w-4 h-4" />}
        >
          <div className="space-y-3">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–¥—Ä–µ—Å—É..."
              className="input-field prevent-zoom"
            />
            <div className="button-grid">
              <button className="btn-compact btn-secondary">
                –ü–æ —Ä–∞–π–æ–Ω—É
              </button>
              <button className="btn-compact btn-secondary">
                –ü–æ —Ç–∏–ø—É
              </button>
            </div>
          </div>
        </GroupedAccordionItem>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã */}
        <GroupedAccordionItem
          title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã"
          icon={<Map className="w-4 h-4" />}
        >
          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <input type="checkbox" id="show-population" className="rounded" />
              <label htmlFor="show-population" className="text-sm">
                –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è
              </label>
            </div>
            <div className="flex items-center gap-2">
              <input type="checkbox" id="show-coverage" className="rounded" />
              <label htmlFor="show-coverage" className="text-sm">
                –ó–æ–Ω—ã –ø–æ–∫—Ä—ã—Ç–∏—è
              </label>
            </div>
          </div>
        </GroupedAccordionItem>
      </MobileAccordionGroup>

      {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π */}
      <div className="pt-4 border-t border-gray-200">
        <button
          onClick={onGenerateRecommendations}
          disabled={isLoading}
          className={`btn-primary w-full ${shouldUseTouchFriendlyElements ? 'touch-target' : ''}`}
        >
          {isLoading ? (
            <div className="flex items-center justify-center gap-2">
              <div className="spinner-enhanced w-4 h-4" />
              –ê–Ω–∞–ª–∏–∑...
            </div>
          ) : (
            '–ù–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞'
          )}
        </button>
      </div>
    </div>
  );
};

export default MobileLayoutExample; 