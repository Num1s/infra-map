import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import fs from 'fs'
import path from 'path'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–∞
let accessConfig;
try {
  const configPath = path.resolve('./access-config.json');
  accessConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
} catch (error) {
  console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å access-config.json, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  accessConfig = {
    allowedIPs: ['127.0.0.1', '::1', '192.168.1.89', '192.168.1.93', '192.168.1.97'],
    settings: { enableIPCheck: true, logAccess: true, blockUnknownIPs: true }
  };
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
const isIPAllowed = (clientIP) => {
  if (!accessConfig.settings.enableIPCheck) return true;
  
  return accessConfig.allowedIPs.some(allowedIP => {
    if (clientIP === allowedIP) return true;
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Å–æ–∫ –ø–æ–¥—Å–µ—Ç–µ–π
    if (allowedIP.endsWith('*')) {
      const subnet = allowedIP.slice(0, -1);
      return clientIP?.startsWith(subnet);
    }
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CIDR –Ω–æ—Ç–∞—Ü–∏–∏ (–±–∞–∑–æ–≤–∞—è)
    if (allowedIP.includes('/')) {
      const [network, mask] = allowedIP.split('/');
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è /24 –ø–æ–¥—Å–µ—Ç–µ–π
      if (mask === '24') {
        const networkBase = network.substring(0, network.lastIndexOf('.'));
        const clientBase = clientIP?.substring(0, clientIP.lastIndexOf('.'));
        return networkBase === clientBase;
      }
    }
    return false;
  });
};

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
const logAccess = (clientIP, allowed, userAgent = '') => {
  if (!accessConfig.settings.logAccess) return;
  
  const timestamp = new Date().toISOString();
  const status = allowed ? '–†–ê–ó–†–ï–®–ï–ù' : '–ó–ê–ü–†–ï–©–ï–ù';
  const logEntry = `[${timestamp}] ${status} - IP: ${clientIP} - UserAgent: ${userAgent}\n`;
  
  try {
    fs.appendFileSync('./access.log', logEntry);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', error);
  }
};

// Middleware –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
const accessControlMiddleware = () => {
  return {
    name: 'access-control',
    configureServer(server) {
      server.middlewares.use((req, res, next) => {
        // –ü–æ–ª—É—á–∞–µ–º IP –∫–ª–∏–µ–Ω—Ç–∞
        const clientIP = req.headers['x-forwarded-for']?.split(',')[0]?.trim() ||
                        req.headers['x-real-ip'] ||
                        req.connection.remoteAddress ||
                        req.socket.remoteAddress ||
                        (req.connection.socket ? req.connection.socket.remoteAddress : null);

        const userAgent = req.headers['user-agent'] || '';
        
        // –û—á–∏—â–∞–µ–º IPv6 localhost
        const cleanIP = clientIP === '::1' ? '127.0.0.1' : 
                       clientIP?.replace('::ffff:', '') || 'unknown';

        console.log(`üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${cleanIP} - ${userAgent.substring(0, 50)}...`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        const allowed = isIPAllowed(cleanIP);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞
        logAccess(cleanIP, allowed, userAgent);

        if (!allowed && accessConfig.settings.blockUnknownIPs) {
          console.log(`‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è IP: ${cleanIP}`);
          
          res.statusCode = 403;
          res.setHeader('Content-Type', 'text/html; charset=utf-8');
          res.end(`
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <title>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω - InfraMap</title>
                <style>
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body { 
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        min-height: 100vh; display: flex; align-items: center; justify-content: center;
                        color: #333;
                    }
                    .container { 
                        background: white; padding: 3rem; border-radius: 20px; 
                        box-shadow: 0 20px 40px rgba(0,0,0,0.1); max-width: 500px; text-align: center;
                        animation: slideIn 0.5s ease-out;
                    }
                    @keyframes slideIn { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }
                    .icon { font-size: 4rem; margin-bottom: 1rem; }
                    h1 { color: #e74c3c; margin-bottom: 1rem; font-size: 1.8rem; }
                    p { color: #666; line-height: 1.6; margin-bottom: 1rem; }
                    .ip-info { 
                        background: #f8f9fa; padding: 1rem; border-radius: 10px; 
                        font-family: 'Courier New', monospace; margin: 1.5rem 0;
                        border-left: 4px solid #e74c3c;
                    }
                    .contact { 
                        background: #e3f2fd; padding: 1rem; border-radius: 10px; 
                        border-left: 4px solid #2196f3; margin-top: 1.5rem;
                    }
                    .time { color: #999; font-size: 0.9rem; margin-top: 1rem; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="icon">üîí</div>
                    <h1>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h1>
                    <p>–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ InfraMap.</p>
                    
                    <div class="ip-info">
                        <strong>–í–∞—à IP-–∞–¥—Ä–µ—Å:</strong><br>
                        ${cleanIP}
                    </div>
                    
                    <p>–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</p>
                    
                    <div class="contact">
                        <strong>üìû –ù—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø?</strong><br>
                        –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.
                    </div>
                    
                    <div class="time">
                        –í—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏: ${new Date().toLocaleString('ru-RU')}
                    </div>
                </div>
            </body>
            </html>
          `);
          return;
        }

        console.log(`‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è IP: ${cleanIP}`);
        next();
      });
    }
  };
};

export default defineConfig({
  plugins: [
    react(),
    accessControlMiddleware()
  ],
  server: {
    host: '0.0.0.0',
    port: 3000,
    cors: {
      origin: function (origin, callback) {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        if (!origin) return callback(null, true);
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ IP
        const allowedOrigins = [
          'http://localhost:3000',
          'http://127.0.0.1:3000',
          ...accessConfig.allowedIPs
            .filter(ip => !ip.includes('*') && !ip.includes('/'))
            .map(ip => `http://${ip}:3000`)
        ];
        
        if (allowedOrigins.some(allowed => origin.startsWith(allowed.replace(':3000', '')))) {
          callback(null, true);
        } else {
          callback(null, true); // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ CORS –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        }
      },
      credentials: true
    },
    proxy: {
      '/api': {
        target: 'http://192.168.1.93:8000',
        changeOrigin: true,
        secure: false,
        logLevel: 'debug',
        onError: (err, req, res) => {
          console.log('Proxy Error:', err);
        },
        onProxyReq: (proxyReq, req, res) => {
          console.log('Proxy Request:', req.method, req.url);
        },
        onProxyRes: (proxyRes, req, res) => {
          console.log('Proxy Response:', proxyRes.statusCode, req.url);
          // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
          res.setHeader('Access-Control-Allow-Origin', '*');
          res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
          res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, Accept');
        }
      }
    }
  }
}) 